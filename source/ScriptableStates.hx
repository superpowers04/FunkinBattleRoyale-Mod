package;
/* This file is automatically generated, there won't be any comments beyond this one. */
import ScriptableState;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.FlxState;
import flixel.FlxSubState;
import flixel.FlxObject;

class ScriptableSearchMenuState extends SearchMenuState{
	override function openSubState(state:FlxSubState){
		try{

			ScriptableStateManager.callInterp('openSubState',[state]);
		}catch(e){
			ScriptableStateManager.handleError('Caught openSubState error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.openSubState(state);
		try{
		ScriptableStateManager.callInterp('openSubStateAfter',[state]);
		}catch(e){
			ScriptableStateManager.handleError('Caught openSubStateAfter error: ${e.toString()}');
		}


	}
	override function handleInput(){
		try{

			ScriptableStateManager.callInterp('handleInput',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught handleInput error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.handleInput();
		try{
		ScriptableStateManager.callInterp('handleInputAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught handleInputAfter error: ${e.toString()}');
		}


	}
	override function destroy(){
		try{

			ScriptableStateManager.callInterp('destroy',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught destroy error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.destroy();
		try{
		ScriptableStateManager.callInterp('destroyAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught destroyAfter error: ${e.toString()}');
		}


	}
	override function closeSubState(){
		try{

			ScriptableStateManager.callInterp('closeSubState',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught closeSubState error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.closeSubState();
		try{
		ScriptableStateManager.callInterp('closeSubStateAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught closeSubStateAfter error: ${e.toString()}');
		}


	}
	override function update(e:Float){
		try{

			ScriptableStateManager.callInterp('update',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught update error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.update(e);
		try{
		ScriptableStateManager.callInterp('updateAfter',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught updateAfter error: ${e.toString()}');
		}


	}
	override function stepHit(){
		try{

			ScriptableStateManager.callInterp('stepHit',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught stepHit error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.stepHit();
		try{
		ScriptableStateManager.callInterp('stepHitAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught stepHitAfter error: ${e.toString()}');
		}


	}
	override function reloadList(?reload = false,?search=""){
		try{

			ScriptableStateManager.callInterp('reloadList',[reload,search]);
		}catch(e){
			ScriptableStateManager.handleError('Caught reloadList error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.reloadList(reload,search);
		try{
		ScriptableStateManager.callInterp('reloadListAfter',[reload,search]);
		}catch(e){
			ScriptableStateManager.handleError('Caught reloadListAfter error: ${e.toString()}');
		}


	}
	override function findButton(){
		try{

			ScriptableStateManager.callInterp('findButton',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught findButton error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.findButton();
		try{
		ScriptableStateManager.callInterp('findButtonAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught findButtonAfter error: ${e.toString()}');
		}


	}
	override function switchTo(state:FlxState):Bool{
		try{
			ScriptableStateManager.callInterp('switchTo',[state]);
		}catch(e){
			ScriptableStateManager.handleError('Caught switchTo error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return false;
		
		return super.switchTo(state);
	}
	override function startOutro(func){
		try{
			ScriptableStateManager.callInterp('startOutro',[func]);
		}catch(e){
			ScriptableStateManager.handleError('Caught startOutro error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		
		return super.startOutro(func);
	}
	override function select(sel:Int = 0){
		try{

			ScriptableStateManager.callInterp('select',[sel]);
		}catch(e){
			ScriptableStateManager.handleError('Caught select error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.select(sel);
		try{
		ScriptableStateManager.callInterp('selectAfter',[sel]);
		}catch(e){
			ScriptableStateManager.handleError('Caught selectAfter error: ${e.toString()}');
		}


	}
	override function beatHit(){
		try{

			ScriptableStateManager.callInterp('beatHit',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught beatHit error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.beatHit();
		try{
		ScriptableStateManager.callInterp('beatHitAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught beatHitAfter error: ${e.toString()}');
		}


	}
	override function onFocus(){
		try{

			ScriptableStateManager.callInterp('onFocus',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocus error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.onFocus();
		try{
		ScriptableStateManager.callInterp('onFocusAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocusAfter error: ${e.toString()}');
		}


	}
	override function tryUpdate(e:Float){
		try{

			ScriptableStateManager.callInterp('tryUpdate',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught tryUpdate error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.tryUpdate(e);
		try{
		ScriptableStateManager.callInterp('tryUpdateAfter',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught tryUpdateAfter error: ${e.toString()}');
		}


	}
	override function create(){
		try{

			ScriptableStateManager.callInterp('create',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught create error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.create();
		try{
		ScriptableStateManager.callInterp('createAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught createAfter error: ${e.toString()}');
		}


	}
	override function addToList(char:String,i:Int = 0){
		try{

			ScriptableStateManager.callInterp('addToList',[char,i]);
		}catch(e){
			ScriptableStateManager.handleError('Caught addToList error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.addToList(char,i);
		try{
		ScriptableStateManager.callInterp('addToListAfter',[char,i]);
		}catch(e){
			ScriptableStateManager.handleError('Caught addToListAfter error: ${e.toString()}');
		}


	}
	override function ret(){
		try{

			ScriptableStateManager.callInterp('ret',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught ret error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		FlxG.switchState(new SelectScriptableState());return;

	}
	override function draw(){
		try{

			ScriptableStateManager.callInterp('draw',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught draw error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.draw();
		try{
		ScriptableStateManager.callInterp('drawAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught drawAfter error: ${e.toString()}');
		}


	}
	override function changeSelection(sel:Int = 0){
		try{

			ScriptableStateManager.callInterp('changeSelection',[sel]);
		}catch(e){
			ScriptableStateManager.handleError('Caught changeSelection error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.changeSelection(sel);
		try{
		ScriptableStateManager.callInterp('changeSelectionAfter',[sel]);
		}catch(e){
			ScriptableStateManager.handleError('Caught changeSelectionAfter error: ${e.toString()}');
		}


	}
	override function onFocusLost(){
		try{

			ScriptableStateManager.callInterp('onFocusLost',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocusLost error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.onFocusLost();
		try{
		ScriptableStateManager.callInterp('onFocusLostAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocusLostAfter error: ${e.toString()}');
		}


	}
	override function new(){
		ScriptableStateManager.callInterp('new',[this,]);
		ScriptableStateManager.interp.variables.set("state",this);
		super();
		ScriptableStateManager.callInterp('newAfter',[]);
	}
}
class ScriptableMusicBeatState extends MusicBeatState{
	override function openSubState(state:FlxSubState){
		try{

			ScriptableStateManager.callInterp('openSubState',[state]);
		}catch(e){
			ScriptableStateManager.handleError('Caught openSubState error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.openSubState(state);
		try{
		ScriptableStateManager.callInterp('openSubStateAfter',[state]);
		}catch(e){
			ScriptableStateManager.handleError('Caught openSubStateAfter error: ${e.toString()}');
		}


	}
	override function draw(){
		try{

			ScriptableStateManager.callInterp('draw',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught draw error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.draw();
		try{
		ScriptableStateManager.callInterp('drawAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught drawAfter error: ${e.toString()}');
		}


	}
	override function destroy(){
		try{

			ScriptableStateManager.callInterp('destroy',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught destroy error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.destroy();
		try{
		ScriptableStateManager.callInterp('destroyAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught destroyAfter error: ${e.toString()}');
		}


	}
	override function tryUpdate(e:Float){
		try{

			ScriptableStateManager.callInterp('tryUpdate',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught tryUpdate error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.tryUpdate(e);
		try{
		ScriptableStateManager.callInterp('tryUpdateAfter',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught tryUpdateAfter error: ${e.toString()}');
		}


	}
	override function create(){
		try{

			ScriptableStateManager.callInterp('create',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught create error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.create();
		try{
		ScriptableStateManager.callInterp('createAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught createAfter error: ${e.toString()}');
		}


	}
	override function update(e:Float){
		try{

			ScriptableStateManager.callInterp('update',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught update error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.update(e);
		try{
		ScriptableStateManager.callInterp('updateAfter',[e]);
		}catch(e){
			ScriptableStateManager.handleError('Caught updateAfter error: ${e.toString()}');
		}


	}
	override function stepHit(){
		try{

			ScriptableStateManager.callInterp('stepHit',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught stepHit error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.stepHit();
		try{
		ScriptableStateManager.callInterp('stepHitAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught stepHitAfter error: ${e.toString()}');
		}


	}
	override function onFocusLost(){
		try{

			ScriptableStateManager.callInterp('onFocusLost',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocusLost error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.onFocusLost();
		try{
		ScriptableStateManager.callInterp('onFocusLostAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocusLostAfter error: ${e.toString()}');
		}


	}
	override function onFocus(){
		try{

			ScriptableStateManager.callInterp('onFocus',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocus error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.onFocus();
		try{
		ScriptableStateManager.callInterp('onFocusAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught onFocusAfter error: ${e.toString()}');
		}


	}
	override function beatHit(){
		try{

			ScriptableStateManager.callInterp('beatHit',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught beatHit error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.beatHit();
		try{
		ScriptableStateManager.callInterp('beatHitAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught beatHitAfter error: ${e.toString()}');
		}


	}
	override function closeSubState(){
		try{

			ScriptableStateManager.callInterp('closeSubState',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught closeSubState error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		super.closeSubState();
		try{
		ScriptableStateManager.callInterp('closeSubStateAfter',[]);
		}catch(e){
			ScriptableStateManager.handleError('Caught closeSubStateAfter error: ${e.toString()}');
		}


	}
	override function switchTo(state:FlxState):Bool{
		try{
			ScriptableStateManager.callInterp('switchTo',[state]);
		}catch(e){
			ScriptableStateManager.handleError('Caught switchTo error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return false;
		
		return super.switchTo(state);
	}
	override function startOutro(func){
		try{
			ScriptableStateManager.callInterp('startOutro',[func]);
		}catch(e){
			ScriptableStateManager.handleError('Caught startOutro error: ${e.toString()}');
		}
		if(ScriptableStateManager.cancelCurrentFunction) return;
		
		return super.startOutro(func);
	}
	override function new(){
		ScriptableStateManager.callInterp('new',[this,]);
		ScriptableStateManager.interp.variables.set("state",this);
		super();
		ScriptableStateManager.callInterp('newAfter',[]);
	}
}
