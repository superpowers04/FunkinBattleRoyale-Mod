package;

import flixel.FlxCamera;
import flixel.addons.ui.FlxUIText;
import haxe.zip.Writer;
import Conductor.BPMChangeEvent;
import Section.SwagSection;
import Song.SwagSong;
import flixel.FlxG;
import flixel.FlxSprite;
import flixel.addons.display.FlxGridOverlay;
import SEInputText as FlxInputText;
import flixel.addons.ui.FlxUI9SliceSprite;
import flixel.addons.ui.FlxUI;
import flixel.addons.ui.FlxUICheckBox;
import flixel.addons.ui.FlxUIDropDownMenu;
import flixel.addons.ui.FlxUINumericStepper;
import flixel.addons.ui.FlxUITabMenu;
import flixel.addons.ui.FlxUITooltip.FlxUITooltipStyle;
import flixel.group.FlxGroup.FlxTypedGroup;
import flixel.group.FlxGroup;
import flixel.math.FlxMath;
import flixel.math.FlxPoint;
import flixel.sound.FlxSound;
import flixel.text.FlxText;
import flixel.ui.FlxButton;
import flixel.ui.FlxSpriteButton;
import flixel.util.FlxColor;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;
import tjson.Json;
import lime.utils.Assets;
import openfl.events.Event;
import openfl.events.IOErrorEvent;
import openfl.events.IOErrorEvent;
import openfl.events.IOErrorEvent;
import openfl.media.Sound;
import openfl.net.FileReference;
import openfl.utils.ByteArray;
import openfl.media.Sound;
import flixel.group.FlxSpriteGroup;
import flixel.graphics.FlxGraphic;
import sys.FileSystem;
import sys.io.File;
import lime.media.AudioBuffer;
import flash.geom.Rectangle;
import haxe.io.Bytes;
import lime.app.Future;
import lime.app.Promise;
import lime.ui.FileDialog;
import lime.ui.FileDialogType;
import flixel.util.FlxTimer;

#if discord_rpc
	import Discord.DiscordClient;
#end

using StringTools;

@:publicFields class CharterNoteData{
	var type:Dynamic = "";
	var meta:Dynamic = "";
	public function new(type:Dynamic,meta:Dynamic){
		this.type= type;
		this.meta = meta;
	}
}

class ChartingState extends ScriptMusicBeatState
{
	var _file:FileReference;

	public static var playClaps:Bool = false;
	public static var charting:Bool = false;

	public var snap:Int = 1;
	public var notesnap:Int = 16;
	public var snapSelection = 3;

	var UI_box:FlxUITabMenu;

	/**
	 * Array of notes showing when each section STARTS in STEPS
	 * Usually rounded up??
	 */
	var curSection:Int = 0;

	public static var lastSection:Int = 0;

	var bpmTxt:FlxText;

	var strumLine:FlxSprite;
	var curSong:String = 'Dad Battle';
	var amountSteps:Int = 0;
	var bullshitUI:FlxGroup;
	var writingNotesText:FlxText;
	var highlight:FlxSprite;

	@:keep inline static var GRID_SIZE:Int = 40;

	var dummyArrow:FlxSprite;

	var curRenderedNotes:FlxTypedGroup<Note>;
	var curRenderedSustains:FlxTypedGroup<FlxSprite>;
	var waveformSprite:FlxSprite;
	var waveformEnabled:FlxUICheckBox;
	var waveformUseInstrumental:FlxUICheckBox;
	var visualiser:FlxSpriteGroup;

	var gridBG:FlxSprite;
	var gridBGEvent:FlxSprite;
	var gridBGAbove:FlxSprite;
	var gridBGBelow:FlxSprite;

	var _song:SwagSong;
	var loadedVoices:FlxSound;
	var loadedInst:Sound;
	public static var voicesFile = "";
	public static var instFile = "";
	public var speed = 1.0;

	var typingShit:FlxInputText;
	var noteTypeInput:FlxInputText; // cuz i'm scary something gonna break
	var noteTypeInputcopy:FlxInputText; // cuz i'm scary something gonna break
	var typingcharactershit:FlxInputText; // that right there a another one
	var useNoteTypeBox:FlxUICheckBox;
	var sustainGraphic:FlxGraphic = null;
	var rawToNote:Map<Array<Dynamic>,Note> = [];
	var noteToRaw:Map<Note,Array<Dynamic>> = [];
	/*
	 * WILL BE THE CURRENT / LAST PLACED NOTE
	**/
	var curSelectedNote:Array<Dynamic>;

	var tempBpm:Float = 0;
	var gridBlackLine:FlxSprite;
	var vocals:FlxSound = null;


	var leftIcon:HealthIcon;
	var rightIcon:HealthIcon;
	var evNote:Note;

	private var lastNote:Note;
	var claps:Array<Note> = [];
	var inst:FlxSound;
	var voices:FlxSound;
	var saveReminder:FlxTimer;
	var chartPath = "";

	static var globalChartPath = "";
	override public function new(?time:Float = 0){
		this.time = time;
		super();
	}
	var stageSel:FlxInputText;
	public static function detectChartType(_song:SwagSong):String{
		if(_song.chartType != null && _song.chartType != "" && _song.chartType != "KE1"){
			return _song.chartType;
		}
		_song.chartType = "FNF";
		if(_song.rawJSON != null && _song.rawJSON is String){
			var rawSong = Json.parse(_song.rawJSON);
			if(rawSong.generatedBy != null){
				_song.chartType += 'Generated by ${rawSong.generatedBy}';
			}
		}
		if(_song.events != null){
			_song.chartType += "/PSYCH";
		}
		if(_song.eventObjects != null || _song.chartType == "KE1"){
			_song.chartType += "/KADE";
		}
		if(_song.mania != null){
			_song.chartType += '/MULTIKEY';
		}
		if(_song.keyCount != null && _song.keyCount != 4){
			_song.chartType += ' (${_song.keyCount}K)';
		}

		return _song.chartType;
	}
	var chartType = "FNF";
	static var snapSound:Sound;
	static var clapSound:Sound;
	public static function playSnap(){
		if(snapSound == null) snapSound= Sound.fromFile('./assets/shared/sounds/SNAP.ogg');
		snapSound.play(new openfl.media.SoundTransform(FlxG.save.data.hitvol));
	}
	public static function playClap(){
		if(clapSound == null)clapSound= Sound.fromFile('./assets/shared/sounds/CLAP.ogg');
		clapSound.play(new openfl.media.SoundTransform(FlxG.save.data.hitvol));
	}
	public static function gotoCharter(){
		// if(FlxG.save.data.legacyCharter){
		LoadingScreen.loadAndSwitchState(new ChartingState(Conductor.songPosition));
		// }else{
		// 	LoadingState.loadAndSwitchState(new charting.ForeverChartEditor());
		// }
	}
	var time:Float = 0;
	override function create()
	{try{
		scriptSubDirectory = "/charting/";
		TitleState.loadNoteAssets();
		curSection = lastSection;
		if(onlinemod.OfflinePlayState.chartFile != ""){
			lastPath = onlinemod.OfflinePlayState.chartFile;
		}
		loadScripts(true,true);
		charting = true;
		if (PlayState.SONG != null) _song = PlayState.SONG;
		else _song = Song.getEmptySong();

		if(_song.player1 == "") _song.player1 = "bf";
		if(_song.player2 == "") _song.player2 = "dad";
		if(_song.notes[curSection] == null) addSection();
		if(_song.notes[curSection + 1] == null) addSection();
		if(_song.notes[curSection + 2] == null) addSection();
		

		chartType = detectChartType(_song);
		if (FlxG.save.data.showHelp == null) FlxG.save.data.showHelp = true;

		LoadingScreen.loadingText = "Adding objects";
		add(gridBG = FlxGridOverlay.create(GRID_SIZE, GRID_SIZE, GRID_SIZE * ((_song.keyCount * 2) + 1), GRID_SIZE * 16));
		add(gridBGAbove = gridBG.clone());
		add(gridBGBelow = gridBG.clone());
		gridBGAbove.y -= gridBG.height;
		gridBGBelow.y += gridBG.height;

		waveformSprite = new FlxSprite((GRID_SIZE * 4) - (GRID_SIZE * 4)).makeGraphic(FlxG.width, FlxG.height, 0x00FFFFFF);
		add(waveformSprite);

		gridBlackLine = new FlxSprite((gridBG.x + gridBG.width / 2) + GRID_SIZE * 0.5).makeGraphic(2, Std.int(gridBG.height), FlxColor.BLACK);
		add(gridBlackLine);
		var gridBlackLine2 = new FlxSprite((gridBG.x + gridBG.width / 2) + GRID_SIZE * 0.5).makeGraphic(2, Std.int(gridBG.height), FlxColor.BLACK);
		add(gridBlackLine2);

		curRenderedNotes = new FlxTypedGroup<Note>();
		curRenderedSustains = new FlxTypedGroup<FlxSprite>();

		FlxG.mouse.visible = true;

		tempBpm = _song.bpm;


		addSection();

		// sections = _song.notes;

		updateGrid();

		LoadingScreen.loadingText = "Loading song";
		loadSong();
		loadAudioBuffer();
		Conductor.changeBPM(_song.bpm);
		Conductor.mapBPMChanges(_song);
		Conductor.songPosition = time;

		LoadingScreen.loadingText = "Loading objects part 2";
		evNote = new Note(0,-1,null,false,true,"PLACEHOLDERICON",[0,-1,"PLACEHOLDERICON"]);
		// evNote = new HealthIcon("EVENTNOTE");
		leftIcon = new HealthIcon(_song.player1,true);
		rightIcon = new HealthIcon(_song.player2);
		leftIcon.scrollFactor.set(1, 1);
		rightIcon.scrollFactor.set(1, 1);
		evNote.scrollFactor.set(1, 1);
		// evNote.setGraphicSize(GRID_SIZE, GRID_SIZE);

		evNote.setGraphicSize(0, 45);
		leftIcon.setGraphicSize(0, 45);
		rightIcon.setGraphicSize(0, 45);

		add(evNote);
		add(leftIcon);
		add(rightIcon);

		leftIcon.setPosition(0, -100);
		rightIcon.setPosition((gridBG.width / 2) + (GRID_SIZE * 0.5), -100);



		strumLine = new FlxSprite(0, 50).makeGraphic(Std.int(FlxG.width), 4);
		add(strumLine);

		dummyArrow = new FlxSprite().makeGraphic(GRID_SIZE, GRID_SIZE);
		add(dummyArrow);

		var tabs = [
			{name: "Assets", label: "Extra Features"},
			{name: "Song", label: 'Song Data'},
			{name: "Section", label: 'Section Data'},
			{name: "Note", label: 'Note Data'}
		];

		UI_box = new FlxUITabMenu(null, tabs, true);

		UI_box.resize(300, 400);
		UI_box.x = 900;
		UI_box.y = 290;
		add(UI_box);
		bpmTxt = new FlxText(FlxG.width * 0.70, 0, 0, "", 16);
		bpmTxt.alignment = LEFT;
		bpmTxt.scrollFactor.set();
		add(bpmTxt);
		var check_editor_input = new FlxUICheckBox(UI_box.x, UI_box.y + UI_box.height + 5, null, null, "Disable editor input (Useful when editing chart stuff)", 100);
		check_editor_input.checked = disabledControls;
		check_editor_input.callback = function(){
			disabledControls = check_editor_input.checked;
			check_editor_input.getLabel().color = (if(disabledControls) FlxColor.RED else FlxColor.WHITE);
			check_editor_input.getLabel().bold = disabledControls;
		};
		check_editor_input.callback();
		check_editor_input.scrollFactor.set();
		add(check_editor_input);


		visualiser = new FlxSpriteGroup(gridBG.x + gridBG.width + 10, gridBG.y);
		visualiser.scrollFactor.set();
		add(visualiser);
		{
			var vBack:FlxSprite = new FlxSprite().loadGraphic(FlxGraphic.fromRectangle(100,26,0xff000000));
			vBack.scrollFactor.set();
			visualiser.add(vBack);
			var v:FlxSprite = new FlxSprite(3,3).loadGraphic(FlxGraphic.fromRectangle(94,20,0xffffffff));
			v.origin.x = 0;
			v.origin.y = 0;
			v.scrollFactor.set();
			visualiser.add(v);
		}
		var musicPlay:FlxButton = new FlxButton(UI_box.x + UI_box.width - 4, UI_box.y + UI_box.height + 4, "Play/Pause", function(){
			if (FlxG.sound.music.playing){
				FlxG.sound.music.pause();
				vocals.pause();
				return;
			}
			requestMusicPlay = true;
		});
		musicPlay.x -= musicPlay.width;
		musicPlay.scrollFactor.set();
		add(musicPlay);

		addSongUI();
		addSectionUI();
		addNoteUI();
		updateWaveform();

		add(curRenderedNotes);
		add(curRenderedSustains);

		gridBlackLine.x = GRID_SIZE + (GRID_SIZE * _song.keyCount) - (gridBlackLine.width * 0.5);
		gridBlackLine2.x = GRID_SIZE - (gridBlackLine.width * 0.5);
		waveformSprite.x = gridBlackLine2.x;
		waveformSprite.alpha = 0.35;
		gridBGAbove.y = gridBG.y - gridBG.height;
		gridBGBelow.y = gridBG.y + gridBG.height;
		gridBGAbove.alpha = 0.7;
		gridBGBelow.alpha = 0.7;





		super.create();
		LoadingScreen.loadingText = "Finishing up";
		if(time != 0){
			Conductor.songPosition = time;
			updateSection();
			time = 0;
		}
		sustainGraphic = FlxGraphic.fromRectangle(1,1,0xFFFFFFFF,false);
		sustainGraphic.persist = true;
		updateSection();
		saveRemind(true);
		updateHeads();
		#if discord_rpc
			DiscordClient.changePresence("Editing a chart",_song.song);
		#end
		}catch(e){MainMenuState.handleError(e,"chart editor did a fucky: " + e.message);
		}
	}


	function sectionRestructure(){
		var notes:Array<Dynamic> = [];
		var mustHitChanges:Array<Null<Int>> = [];
		// Fake conductor things
		var currentMustHit:Bool = false;
		var currentTime = Conductor.songPosition;
		var currentMHSel:Int = 0;
		var currentBPM:Float = 0;
		var currentBPMSel:Int = 0;
		var _time:Float = 0;
		Conductor.songPosition = 0;
		for (ii in 0..._song.notes.length)
		{
			if(FlxG.keys.pressed.SHIFT){

				if(_song.notes[ii].changeBPM){
					currentBPM = _song.notes[ii].bpm;
				}
				Conductor.songPosition = _time += ((60 / currentBPM) * 1000 / 4) * 16;
				updateCurStep();
				curStep = recalculateSteps();
				updateSection();

				if(currentMustHit != _song.notes[ii].mustHitSection){
					mustHitChanges.push(curStep);
					currentMustHit = !currentMustHit;
				}
				_song.notes[ii].lengthInMS = ((60 / currentBPM) * 1000 / 4) * 16;
			}
			for (i in 0..._song.notes[ii].sectionNotes.length)
			{
				notes.push(_song.notes[ii].sectionNotes[i]);
			}
			_song.notes[ii].sectionNotes = [];
		}
		if(FlxG.keys.pressed.SHIFT){ // FNF's chart format sucks
			_song.notes = [];
			var loopAttempts = 0;
			Conductor.songPosition = 0;
			currentMustHit = !false;
			var bpmChanges = Conductor.bpmChangeMap;
			Conductor.bpmChangeMap = [];
			currentBPM = 0;
			while (Conductor.songPosition < FlxG.sound.music.length && loopAttempts < 10000000){ // Loop Attempts to prevent softlocking or crashing. 10000000 should be fucking plenty
				loopAttempts--;
				var section = addSection();
				Conductor.songPosition += ((60 / currentBPM) * 1000 / 4) * 16;
				curStep = recalculateSteps();
				updateSection();
				
				if(mustHitChanges[currentMHSel] != null && mustHitChanges[currentMHSel] <= curStep){ // Handles mustHitSections
					currentMustHit = !currentMustHit;
					currentMHSel++;
				}
				if(bpmChanges[currentBPMSel] != null && bpmChanges[currentBPMSel].stepTime <= curStep){ // Handles BPM's
					section.changeBPM = true;
					section.bpm = currentBPM = bpmChanges[currentBPMSel].bpm;
					currentBPMSel++;
				}
				section.mustHitSection = currentMustHit;
			}
		}
		notes.sort(function(o:Array<Dynamic>,o2:Array<Dynamic>){
			if(o[0] < o2[0]) return -1;
			else if(o[0] > o2[0]) return 1;
			else return 0;
		});

		Conductor.songPosition = 0;
		currentBPM = 0;
		var _time:Float = 0;
		var note = notes.shift();
		for (ii in 0..._song.notes.length)
		{
			_time += _song.notes[ii].lengthInMS;
			while(note[0] < _time){
				_song.notes[ii].sectionNotes.push(note);
				note = notes.pop();
			}
		}

		// for (index => note in notes) {
		// 	_time = Conductor.songPosition;
		// 	var fnfformatisshit:Float = _time; 
		// 	while(_time < note[0]){
		// 		updateCurStep();
		// 		_time += Conductor.crochet;
		// 	}
		// 	Conductor.songPosition = note[0];
		// 	var e:SwagSection = _song.notes[Std.int(curStep / 16)];
		// 	if(_song.notes[Std.int(curStep / 16)] == null){
		// 		var limit = 1000; // Prevent crash due to infinite recursion or some shit, 1000 should be reasonable
		// 		var time = _time;
		// 		while(_song.notes[Std.int(curStep / 16)] == null && limit > 0){
		// 			var section = addSection();
		// 			// if(FlxG.keys.pressed.SHIFT){

		// 			// 	time += ((60 / currentBPM) * 1000 / 4) * 16;
		// 			// 	Conductor.songPosition = time;
		// 			// 	updateCurStep();
		// 			// 	if(mustHitChanges[currentMHSel] != null && mustHitChanges[currentMHSel] <= curStep){
		// 			// 		currentMustHit = !currentMustHit;
		// 			// 		currentMHSel++;
		// 			// 	}
		// 			// 	if(Conductor.bpmChangeMap[currentBPMSel] != null && Conductor.bpmChangeMap[currentBPMSel].stepTime <= curStep){
		// 			// 		section.changeBPM = true;
		// 			// 		section.bpm = currentBPM = Conductor.bpmChangeMap[currentBPMSel].bpm;
		// 			// 		currentBPMSel++;
		// 			// 	}
		// 			// 	section.mustHitSection = currentMustHit;
		// 			// }
		// 			limit--;
		// 		}
		// 		if(_song.notes[Std.int(curStep / 16)] == null){
		// 			e = _song.notes[_song.notes.length];
		// 		}else{
		// 			e = _song.notes[Std.int(curStep / 16)];
		// 		}
		// 	}else{
		// 		currentMustHit = _song.notes[Std.int(curStep / 16)].mustHitSection;
		// 	}
		// 	_song.notes[Std.int(curStep / 16)].sectionNotes.push(note);
		// }
		// Conductor.songPosition = timing;
		Conductor.mapBPMChanges(_song);
		Conductor.songPosition =currentTime;
		updateCurStep();
		updateGrid();
		updateSectionUI();
		showTempmessage(if(FlxG.keys.pressed.SHIFT)"Restructured chart!" else "Reordered chart!");
	}
	static var playBeatClaps:Bool = false;

	function addSongUI():Void
	{
		var UI_songTitle = new FlxInputText(10, 10, 200, _song.song, 8);
		typingShit = UI_songTitle;


		var saveButton:FlxButton = new FlxButton(220, 10, "Save", function()
		{
			saveLevel();
		});
		// var loadButton:FlxButton = new FlxButton(20, 27, "Load", function()
		// {
		// 	loadLevel_();
		// });

		var reloadSong:FlxButton = new FlxButton(saveButton.x, saveButton.y + saveButton.height + 4, "Reload Audio", function()
		{
			loadSong();
			loadAudioBuffer();
		});

		
		var restart = new FlxButton(saveButton.x, saveButton.y + 40,"Reset Chart", function()
            {
                for (ii in 0..._song.notes.length)
                {
                    _song.notes[ii].sectionNotes = [];
                }
                resetSection(true);
            });
		var reloadChartEditor = new FlxButton(saveButton.x, saveButton.y + 60,"Reload Editor", function(){
			PlayState.SONG = _song;
			FlxG.switchState(new ChartingState());
		});

		// var loadAutosaveBtn:FlxButton = new FlxButton(reloadSong.x, reloadSong.y + 30, 'load autosave', loadAutosave);
		// var fixchart:FlxButton = new FlxButton(reloadSong.x, saveButton.y + 40, 'Reorder notes to sections', sectionRestructure);

		var check_voices = new FlxUICheckBox(10, 200, null, null, "Has voice track", 100);
		check_voices.checked = _song.needsVoices;
		// _song.needsVoices = check_voices.checked;
		check_voices.callback = function()
		{
			_song.needsVoices = check_voices.checked;
			vocals.volume = if (check_voices.checked) 1 else 0;
		};
		var stepperKeyCountLabel = new FlxText(74,50,'Key Count(Needs editor reload)');
		var stepperKeyCount:FlxUINumericStepper = new FlxUINumericStepper(10, 50, 1, 4, 1, 18, 0);
		stepperKeyCount.value = _song.keyCount;
		stepperKeyCount.name = 'song_keycount';
		var stepperBPMLabel = new FlxText(74,70,'BPM');
		var stepperBPM:FlxUINumericStepper = new FlxUINumericStepper(10, 70, 0.1, 1, 1.0, 9999.0, 3);
		stepperBPM.value = Conductor.bpm;
		stepperBPM.name = 'song_bpm';

		// var stepperBPMOffsetLabel = new FlxText(74,80,'BPM Offset');
		// var stepperBPMOffset:FlxUINumericStepper = new FlxUINumericStepper(10, 80, 0, 1, -9999, 9999, 0);
		// stepperBPMOffset.value = Conductor.offset;
		// stepperBPMOffset.name = 'song_offset';
		
		var stepperSpeedLabel = new FlxText(74,95,'Scroll Speed');
		var stepperSpeed:FlxUINumericStepper = new FlxUINumericStepper(10, 95, 0.1, 1, 0.1, 10, 3);
		stepperSpeed.value = _song.speed;
		stepperSpeed.name = 'song_speed';
		
		var stepperVocalVolLabel = new FlxText(74, 110, 'Editor Vocal Volume');
		var stepperVocalVol:FlxUINumericStepper = new FlxUINumericStepper(10, 110, 0.1, 1, 0, 10, 3);
		stepperVocalVol.value = vocals.volume;
		stepperVocalVol.name = 'song_vocalvol';

		
		var stepperSongVolLabel = new FlxText(74, 125, 'Editor Instrumental Volume');
		var stepperSongVol:FlxUINumericStepper = new FlxUINumericStepper(10, 125, 0.1, 1, 0, 10, 3);
		stepperSongVol.value = FlxG.sound.music.volume;
		stepperSongVol.name = 'song_instvol';

		var hitsounds = new FlxUICheckBox(10, 180, null, null, "Play hitsounds", 100);
		hitsounds.checked = playClaps;
		hitsounds.callback = function()
		{
			playClaps = hitsounds.checked;
			if(playClaps) playSnap();
		};

		var beatcheck = new FlxUICheckBox(10, check_voices.y + 20, null, null, "Play beat claps", 100);
		beatcheck.checked = playBeatClaps;
		beatcheck.callback = function()
		{
			playBeatClaps = beatcheck.checked;
			if(playBeatClaps) playClap();
		};

		
		var shiftNoteDialLabel = new FlxText(10, 235, 'Shift Note by Section');
		var stepperShiftNoteDial:FlxUINumericStepper = new FlxUINumericStepper(10, 250, 1, 0, -1000, 1000, 0);
		stepperShiftNoteDial.name = 'song_shiftnote';
		var shiftNoteDialLabel2 = new FlxText(10, 275, 'Shift Note by Step');
		var stepperShiftNoteDialstep:FlxUINumericStepper = new FlxUINumericStepper(10, 290, 1, 0, -1000, 1000, 0);
		stepperShiftNoteDialstep.name = 'song_shiftnotems';
		var shiftNoteDialLabel3 = new FlxText(10, 305, 'Shift Note by MS');
		var stepperShiftNoteDialms:FlxUINumericStepper = new FlxUINumericStepper(10, 320, 1, 0, -1000, 1000, 2);
		stepperShiftNoteDialms.name = 'song_shiftnotems';

		var shiftNoteButton:FlxButton = new FlxButton(10, 345, "Shift", function()
		{
			shiftNotes(Std.int(stepperShiftNoteDial.value),Std.int(stepperShiftNoteDialstep.value),Std.int(stepperShiftNoteDialms.value));
		});



		// I didn't copy this, dunno what you mean
		var jumpsectiontext = new FlxText(10,305,128,'Jump Section');
		var jumpsectionbox = new FlxUINumericStepper(jumpsectiontext.x,jumpsectiontext.y + 15, 1, 0, -1000, 1000,0);
		var jumpsectionbutton = new FlxButton(jumpsectionbox.x + 60,jumpsectionbox.y,'Jump', function(){changeSection(Std.int(jumpsectionbox.value));});



		var hurtnotescoretxt = new FlxUIText(150, hitsounds.y, 'Hurtnote Score');
		var hurtnotescore = new FlxUINumericStepper(hurtnotescoretxt.x , hurtnotescoretxt.y + 20 , 100, _song.noteMetadata.badnoteScore, -1000000, 1000000);
		var hurtnotescoreapply = new FlxButton(hurtnotescore.x + 60 , hurtnotescore.y , 'apply', function(){_song.noteMetadata.badnoteScore = Std.int(hurtnotescore.value) - 10;});

		var hurtnotehealthtxt = new FlxUIText(hurtnotescore.x , hurtnotescore.y + 40 , 'Hurtnote Health');
		var hurtnotehealth = new FlxUINumericStepper(hurtnotehealthtxt.x , hurtnotehealthtxt.y + 20 , 0.01 , _song.noteMetadata.badnoteHealth, -2, 2, 2);
		var hurtnotehealthapply = new FlxButton(hurtnotehealth.x + 60 , hurtnotehealth.y , 'apply', function(){_song.noteMetadata.badnoteHealth = hurtnotehealth.value;});


		// tab_group_song.add(loadButton);
		// tab_group_song.add(loadAutosaveBtn);
		var tab_group_song = new FlxUI(null, UI_box);
		tab_group_song.name = "Song";
		tab_group_song.add(UI_songTitle);
		tab_group_song.add(restart);
		tab_group_song.add(check_voices);
		tab_group_song.add(saveButton);
		tab_group_song.add(reloadSong);
		tab_group_song.add(reloadChartEditor);
		// tab_group_song.add(fixchart);
		tab_group_song.add(stepperBPM);
		tab_group_song.add(stepperBPMLabel);
		tab_group_song.add(stepperKeyCount);
		tab_group_song.add(stepperKeyCountLabel);
		// tab_group_song.add(stepperBPMOffset);
		// tab_group_song.add(stepperBPMOffsetLabel);
		tab_group_song.add(stepperSpeed);
		tab_group_song.add(stepperSpeedLabel);
		tab_group_song.add(stepperVocalVol);
		tab_group_song.add(stepperVocalVolLabel);
		tab_group_song.add(stepperSongVol);
		tab_group_song.add(stepperSongVolLabel);
        tab_group_song.add(shiftNoteDialLabel);
        tab_group_song.add(stepperShiftNoteDial);
        tab_group_song.add(shiftNoteDialLabel2);
        tab_group_song.add(stepperShiftNoteDialstep);
        tab_group_song.add(shiftNoteDialLabel3);
        tab_group_song.add(stepperShiftNoteDialms);
        tab_group_song.add(shiftNoteButton);
        tab_group_song.add(beatcheck);
		uiMap["UI_songTitle"] = UI_songTitle;
		uiMap["restart"] = restart;
		uiMap["check_voices"] = check_voices;
		uiMap["saveButton"] = saveButton;
		uiMap["reloadSong"] = reloadSong;
		uiMap["reloadChartEditor"] = reloadChartEditor;
		// uiMap["fixchart"] = fixchart;
		uiMap["stepperBPM"] = stepperBPM;
		uiMap["stepperBPMLabel"] = stepperBPMLabel;
		uiMap["stepperKeyCount"] = stepperKeyCount;
		uiMap["stepperKeyCountLabel"] = stepperKeyCountLabel;
		// uiMap["stepperBPMOffset"] = stepperBPMOffset;
		// uiMap["stepperBPMOffsetLabel"] = stepperBPMOffsetLabel;
		uiMap["stepperSpeed"] = stepperSpeed;
		uiMap["stepperSpeedLabel"] = stepperSpeedLabel;
		uiMap["stepperVocalVol"] = stepperVocalVol;
		uiMap["stepperVocalVolLabel"] = stepperVocalVolLabel;
		uiMap["stepperSongVol"] = stepperSongVol;
		uiMap["stepperSongVolLabel"] = stepperSongVolLabel;
		uiMap["shiftNoteDialLabel"] = shiftNoteDialLabel;
		uiMap["stepperShiftNoteDial"] = stepperShiftNoteDial;
		uiMap["shiftNoteDialLabel2"] = shiftNoteDialLabel2;
		uiMap["stepperShiftNoteDialstep"] = stepperShiftNoteDialstep;
		uiMap["shiftNoteDialLabel3"] = shiftNoteDialLabel3;
		uiMap["stepperShiftNoteDialms"] = stepperShiftNoteDialms;
		uiMap["shiftNoteButton"] = shiftNoteButton;
		uiMap["beatcheck"] = beatcheck;

        var invertChartButton:FlxButton = new FlxButton(100, 345, "Invert chart", function()
		{
			for (i in 0 ... _song.notes.length){
				for (ni in 0..._song.notes[i].sectionNotes.length){
					if(_song.notes[i].sectionNotes[ni][1] > -1){
						_song.notes[i].sectionNotes[ni][1] = (_song.notes[i].sectionNotes[ni][1] + _song.keyCount) % (_song.keyCount * 2);
					}
				}
			}
			updateGrid();
			updateSectionUI();
			
		});

        var invertSectionsButton:FlxButton = new FlxButton(210, 345, "Invert all sections", function()
		{
			for (i in 0 ... _song.notes.length){
				_song.notes[i].mustHitSection = !_song.notes[i].mustHitSection;
			}
			updateGrid();
			updateSectionUI();
			
		});

        tab_group_song.add(invertChartButton);uiMap['invertChartButton'] = invertChartButton;
        tab_group_song.add(invertSectionsButton);uiMap['invertSectionsButton'] = invertSectionsButton;
		tab_group_song.add(hitsounds);uiMap['hitsounds'] = hitsounds;
		tab_group_song.add(hurtnotescoretxt);uiMap['hurtnotescoretxt'] = hurtnotescoretxt;
		tab_group_song.add(hurtnotescore);uiMap['hurtnotescore'] = hurtnotescore;
		tab_group_song.add(hurtnotescoreapply);uiMap['hurtnotescoreapply'] = hurtnotescoreapply;
		tab_group_song.add(hurtnotehealthtxt);uiMap['hurtnotehealthtxt'] = hurtnotehealthtxt;
		tab_group_song.add(hurtnotehealth);uiMap['hurtnotehealth'] = hurtnotehealth;
		tab_group_song.add(hurtnotehealthapply);uiMap['hurtnotehealthapply'] = hurtnotehealthapply;

		var tab_group_assets = new FlxUI(null, UI_box);
		waveformEnabled = new FlxUICheckBox(10, 10, null, null, "Visible Waveform", 100);
		if (FlxG.save.data.chart_waveform == null) FlxG.save.data.chart_waveform = true;
		waveformEnabled.checked = FlxG.save.data.chart_waveform;
		waveformEnabled.callback = function()
		{
			FlxG.save.data.chart_waveform = waveformEnabled.checked;
			updateWaveform();
		};

		var forceChars = new FlxUICheckBox(waveformEnabled.x + 140, 120, null, null, "Force chart characters", 100);
		forceChars.checked = _song.forceCharacters;
		forceChars.callback = function()
		{
			_song.forceCharacters = forceChars.checked;
		};
		waveformUseInstrumental = new FlxUICheckBox(waveformEnabled.x + 140, waveformEnabled.y, null, null, "Waveform for Instrumental", 100);
		waveformUseInstrumental.checked = !_song.needsVoices;
		waveformUseInstrumental.callback = function()
		{
			updateWaveform();
		};

		var player1DropDown = new FlxInputText(10, 50, 120, _song.player1, 8);
		typingcharactershit = player1DropDown;

		var player1Label = new FlxText(10,30,64,'Player');

		var player2DropDown = new FlxInputText(140, 50, 120, _song.player2, 8);
		typingcharactershit = player2DropDown;

		var player2Label = new FlxText(140,30,64,'Opponent');

		var acceptplayer1 = new FlxButton(10,70,'apply', function(){
			_song.player1 = player1DropDown.text;
			leftIcon.changeSprite(_song.player1);
		});
		var acceptplayer2 = new FlxButton(140,70,'apply', function(){
			_song.player2 = player2DropDown.text;
			rightIcon.changeSprite(_song.player2);
		});

		stageSel = new FlxInputText(10, 120, 120, _song.stage, 8);
		stageSel.callback = (_,_) -> {
			_song.stage = stageSel.text;
		};

		var stageLabel = new FlxText(10,100,64,'Stage');

		tab_group_assets.name = "Assets";
		tab_group_assets.add(player1DropDown); uiMap["player1DropDown"] = player1DropDown;
		tab_group_assets.add(player2DropDown); uiMap["player2DropDown"] = player2DropDown;
		tab_group_assets.add(player1Label); uiMap["player1Label"] = player1Label;
		tab_group_assets.add(player2Label); uiMap["player2Label"] = player2Label;
		tab_group_assets.add(acceptplayer1); uiMap["acceptplayer1"] = acceptplayer1;
		tab_group_assets.add(acceptplayer2); uiMap["acceptplayer2"] = acceptplayer2;
		tab_group_assets.add(stageSel); uiMap["stageSel"] = stageSel;
		tab_group_assets.add(stageLabel); uiMap["stageLabel"] = stageLabel;
		tab_group_assets.add(waveformEnabled); uiMap['waveformEnabled'] = waveformEnabled;
		tab_group_assets.add(forceChars); uiMap['forceChars'] = forceChars;
		tab_group_assets.add(waveformUseInstrumental); uiMap['waveformUseInstrumental'] = waveformUseInstrumental;
        tab_group_assets.add(jumpsectiontext); uiMap['jumpsectiontext'] = jumpsectiontext;
		tab_group_assets.add(jumpsectionbox); uiMap['jumpsectionbox'] = jumpsectionbox;
		tab_group_assets.add(jumpsectionbutton); uiMap['jumpsectionbutton'] = jumpsectionbutton;

		UI_box.addGroup(tab_group_song);
		UI_box.addGroup(tab_group_assets);
		UI_box.scrollFactor.set();

		FlxG.camera.follow(strumLine);
	}

	var stepperLength:FlxUINumericStepper;
	var check_mustHitSection:FlxUICheckBox;
	var check_centerCamera:FlxUICheckBox;
	var check_changeBPM:FlxUICheckBox;
	var stepperSectionBPM:FlxUINumericStepper;
	var check_altAnim:FlxUICheckBox;

	var sectionBuffer:Array<Array<Dynamic>> = [];
	var pasteButton:FlxButton; 
	var disabledControls = false;
	var lastCopiedNotes = [];

	function addSectionUI():Void
	{
		var tab_group_section = new FlxUI(null, UI_box);
		tab_group_section.name = 'Section';

		stepperLength = new FlxUINumericStepper(10, 10, 4, 0, 0, 999, 0);
		stepperLength.value = _song.notes[curSection].lengthInSteps;
		stepperLength.name = "section_length";

		var stepperLengthLabel = new FlxText(74,10,'Section Length (in steps)');

		stepperSectionBPM = new FlxUINumericStepper(10, 80, 1, Conductor.bpm, 0, 999, 1);
		stepperSectionBPM.value = Conductor.bpm;
		stepperSectionBPM.name = 'section_bpm';

		// var stepperCopy:FlxUINumericStepper = new FlxUINumericStepper(110, 132, 1, 1, -999, 999, 0);
		// var stepperCopyLabel = new FlxText(174,132,'sections back');

		var copyInfo = new FlxText(120,110,'Copies and pastes relative to\n where your stepper is.');
		var copyButton:FlxButton = new FlxButton(10, 110, "Copy selected notes", function(){	
			var note:Array<Dynamic>;
			sectionBuffer = [];
			for (i in 0...selectedNotes.length){
				try{
					var note:Array<Dynamic> = selectedNotes[i][1].copy();
					note[0] -= Conductor.songPosition;
					sectionBuffer.push(note);
				}catch(e){
					trace('Error copying note $i: ${e.message}');
				}
			}
			if(sectionBuffer[0] == null){
				pasteButton.alpha = 0.7;
				showTempmessage("No notes to copy!",FlxColor.RED);
				return;
			}
			pasteButton.alpha = 1;
		});
		pasteButton = new FlxButton(10, 130, "Paste copied notes", function()
		{
			if(sectionBuffer[0] == null){
				pasteButton.alpha = 0.7;
				showTempmessage("No notes to paste!",FlxColor.RED);
				return;
			}
			var timing = Conductor.songPosition;
			lastCopiedNotes = [];
			for (i in 0...sectionBuffer.length)
			{
				var note:Array<Dynamic> = sectionBuffer[i].copy();
				note[0] += timing;
				Conductor.songPosition = note[0];
				updateCurStep();
				updateGrid(false);
				updateSectionUI();
				lastCopiedNotes.push(note);
				_song.notes[curSection].sectionNotes.push(note);
			}
			Conductor.songPosition = timing;
			updateGrid();
			updateSectionUI();
		});
		pasteButton.alpha = 0.7;
		// var pastedNotes = new FlxButton(10, 130, "Undo pasted notes", function()
		// {
		// 	if(lastCopiedNotes[0] == null){
		// 		pastedNotes.alpha = 0.7;
		// 		return showTempmessage("No notes to undo!",FlxColor.RED);
		// 	}
		// 	var timing = Conductor.songPosition;
		// 	for (i in 0...lastCopiedNotes.length)
		// 	{	

		// 		updateCurStep();
		// 		updateGrid(false);
		// 		updateSectionUI();
		// 		lastCopiedNotes.push(note);
		// 		_song.notes[curSection].sectionNotes.push(note);
		// 	}
		// 	lastCopiedNotes = [];
		// 	Conductor.songPosition = timing;
		// 	updateGrid();
		// 	updateSectionUI();
		// });

		var clearSectionButton:FlxButton = new FlxButton(10, 150, "Clear Section", clearSection);

		var swapSection:FlxButton = new FlxButton(10, 170, "Swap Section", function()
		{
			for (i in 0..._song.notes[curSection].sectionNotes.length)
			{
				var note = _song.notes[curSection].sectionNotes[i];
				if(note[1] > -1){
					note[1] = (note[1] + _song.keyCount) % (_song.keyCount * 2);
					_song.notes[curSection].sectionNotes[i] = note;
					updateNote(null,_song.notes[curSection].sectionNotes[i]);
					// updateSectionUI();
				}
			}
			updateGrid();
		});
		var mirrorSection:FlxButton = new FlxButton(10, 190, "Mirror Section", function()
		{
			for (i in 0..._song.notes[curSection].sectionNotes.length){
				var note = _song.notes[curSection].sectionNotes[i].copy();
				if(note[1] > -1){
					note[1] = 1 + ((_song.keyCount * 2) - note[1]) % (_song.keyCount * 2);
					_song.notes[curSection].sectionNotes.push(note);
					updateNote(null,_song.notes[curSection].sectionNotes[i]);
				}
			}
			updateGrid();
		});
		check_mustHitSection = new FlxUICheckBox(10, 30, null, null, "Is player section", 100);
		check_mustHitSection.name = 'check_mustHit';
		check_mustHitSection.checked = true;
		check_centerCamera = new FlxUICheckBox(120, 30, null, null, "Center Camera", 100);
		check_centerCamera.name = 'check_centerCamera';
		check_centerCamera.checked = false;
		// _song.needsVoices = check_mustHit.checked;

		check_altAnim = new FlxUICheckBox(10, 300, null, null, "Alt Animations", 100);
		check_altAnim.name = 'check_altAnim';

		check_changeBPM = new FlxUICheckBox(10, 60, null, null, 'Change BPM', 100);
		check_changeBPM.name = 'check_changeBPM';

		// tab_group_section.add(stepperCopy);
		// tab_group_section.add(stepperCopy);
		// tab_group_section.add(stepperCopyLabel);
		tab_group_section.add(stepperLength);uiMap['stepperLength'] = stepperLength;
		tab_group_section.add(stepperLengthLabel);uiMap['stepperLengthLabel'] = stepperLengthLabel;
		tab_group_section.add(stepperSectionBPM);uiMap['stepperSectionBPM'] = stepperSectionBPM;
		tab_group_section.add(check_mustHitSection);uiMap['check_mustHitSection'] = check_mustHitSection;
		tab_group_section.add(check_centerCamera);uiMap['check_centerCamera'] = check_centerCamera;
		tab_group_section.add(mirrorSection);uiMap['mirrorSection'] = mirrorSection;
		tab_group_section.add(check_altAnim);uiMap['check_altAnim'] = check_altAnim;
		tab_group_section.add(check_changeBPM);uiMap['check_changeBPM'] = check_changeBPM;
		tab_group_section.add(copyButton);uiMap['copyButton'] = copyButton;
		tab_group_section.add(copyInfo);uiMap['copyInfo'] = copyInfo;
		tab_group_section.add(pasteButton);uiMap['pasteButton'] = pasteButton;
		tab_group_section.add(clearSectionButton);uiMap['clearSectionButton'] = clearSectionButton;
		tab_group_section.add(swapSection);uiMap['swapSection'] = swapSection;

		UI_box.addGroup(tab_group_section);
	}

	var stepperSusLength:FlxUINumericStepper;

	var tab_group_note:FlxUI;
	inline function typingFocus() {return !disabledControls && !typingShit.hasFocus && !stageSel.hasFocus && !noteTypeInput.hasFocus && !typingcharactershit.hasFocus;} 
	static var storedNoteData:Array<CharterNoteData> = [];
	var storedNDButtons:Array<Array<FlxButton>> = [];
	function addNoteUI():Void
	{
		var tab_group_note = new FlxUI(null, UI_box);
		tab_group_note.name = 'Note';

		writingNotesText = new FlxUIText(20,100, 0, "");
		writingNotesText.setFormat(CoolUtil.font,20,FlxColor.WHITE,FlxTextAlign.LEFT,FlxTextBorderStyle.OUTLINE,FlxColor.BLACK);

		stepperSusLength = new FlxUINumericStepper(10, 10, Conductor.stepCrochet / 2, 0, 0, Conductor.stepCrochet * _song.notes[curSection].lengthInSteps * 16);
		stepperSusLength.value = 0;
		stepperSusLength.name = 'note_susLength';
		var stepperSusLengthLabel = new FlxText(75,10,'Note Sustain Length');

		var notetypetxt = new FlxUIText(20,10,'Note Type');
		var notetypeinput = new FlxInputText(notetypetxt.x , notetypetxt.y + 20, 120,null, 8);
		noteTypeInput = notetypeinput;
		var notetype2txt = new FlxUIText(20,90,'Note Params(Seperated by commas)');
		var notetype2input = new FlxInputText(notetype2txt.x , notetype2txt.y + 20, 250,"", 16);
		noteTypeInputcopy = notetype2input;

		useNoteTypeBox = new FlxUICheckBox(notetypeinput.x , notetypeinput.y + 20 ,null,null, 'Use note type?');
		useNoteTypeBox.checked = true;
		var storeNoteData = function(id:Int) {
			return function(){
				storedNoteData[id] = new CharterNoteData(noteTypeInput.text,notetype2input.text);
				storedNDButtons[id][1].alpha = 1;
			}
		}
		var getNoteData = function(id:Int) {
			return function(){
				if(storedNoteData[id] == null){
					showTempmessage('Nothing has been stored here!',FlxColor.RED);
					return;
				}
				noteTypeInput.text = storedNoteData[id].type;
				notetype2input.text = storedNoteData[id].meta;
			}
		}
		inline function addNoteStore(id:Int,x:Float,y:Float){
			var e = storedNDButtons[id] = [];
			tab_group_note.add(e[0] = new FlxButton(x, y, 'Store notedata $id', storeNoteData(id)));
			tab_group_note.add(e[1] = new FlxButton(x + 100, y, 'Get notedata $id', getNoteData(id)));
			e[1].alpha = 0.5;
		}
		// var applyNoteMeta = function() {
		// 	if(currentNoteObj == null) return showTempmessage('No note currently selected!',FlxColor.RED);
		// 	addNote(currentNoteObj);
		// 	return showTempmessage('Updated note!',FlxColor.RED);
		// }



		//tab_group_note.add(m_checkhell);
		tab_group_note.add(notetypeinput);uiMap['notetypeinput'] = notetypeinput;
		tab_group_note.add(notetypetxt);uiMap['notetypetxt'] = notetypetxt;
		tab_group_note.add(notetype2input);uiMap['notetype2input'] = notetype2input;
		tab_group_note.add(notetype2txt);uiMap['notetype2txt'] = notetype2txt;
		tab_group_note.add(useNoteTypeBox);uiMap['useNoteTypeBox'] = useNoteTypeBox;
		// tab_group_note.add(uiMap['noteTypeApply'] = new FlxButton(170, 20, 'Apply Note metadata', applyNoteMeta));
		addNoteStore(1,20,140);
		addNoteStore(2,20,160);
		addNoteStore(3,20,180);
		addNoteStore(4,20,180);
		addNoteStore(5,20,200);
		addNoteStore(6,20,220);

		UI_box.addGroup(tab_group_note);



	}

	inline function loadAudioBuffer() {

		audioBuffers[0] = AudioBuffer.fromFile(SELoader.getPath(if(onlinemod.OfflinePlayState.instFile != "") onlinemod.OfflinePlayState.instFile else ('assets/songs/' + _song.song.toLowerCase() + "/Inst.ogg")));
		audioBuffers[1] = AudioBuffer.fromFile(SELoader.getPath(if(onlinemod.OfflinePlayState.voicesFile != "") onlinemod.OfflinePlayState.voicesFile else ('assets/songs/' + _song.song.toLowerCase() + "/Voices.ogg")));
		// audioBytes[0] = audioBuffers[0].data.toBytes();
		// audioBytes[1] = audioBuffers[1].data.toBytes();
	}
	var noVocals:Bool = false;
	public static var lastInst:String = "";
	public static var lastVoices:String = "";
	public static var lastChart:String = "";

	function loadSong():Void
	{
		if (FlxG.sound.music != null) FlxG.sound.music.stop();
			// vocals.stop();

		loadedInst = Sound.fromFile(onlinemod.OfflinePlayState.instFile);
		FlxG.sound.playMusic(loadedInst, 0.6,true);

		lastInst = onlinemod.OfflinePlayState.instFile;
		lastVoices = onlinemod.OfflinePlayState.voicesFile;
		lastChart = onlinemod.OfflinePlayState.chartFile;

		// WONT WORK FOR TUTORIAL OR TEST SONG!!! REDO LATER
		if(_song.needsVoices || (onlinemod.OfflinePlayState.voicesFile != "" && FileSystem.exists(onlinemod.OfflinePlayState.voicesFile))){
			vocals = new FlxSound().loadEmbedded(Sound.fromFile(onlinemod.OfflinePlayState.voicesFile));

		} 
		if(vocals == null){
			vocals = new FlxSound();
			noVocals = true;
		}

		FlxG.sound.list.add(vocals);
		FlxG.sound.music.pause();
		vocals.pause();

		FlxG.sound.music.onComplete = function()
		{
			vocals.pause();
			vocals.time = 0;
			FlxG.sound.music.pause();
			FlxG.sound.music.time = 0;
			changeSection();
		};
		trace('Inst - ${loadedInst}');
		trace('Voices - ${vocals}');
	}

	function generateUI():Void
	{
		while (bullshitUI.members.length > 0) bullshitUI.remove(bullshitUI.members[0], true);

		// general shit
		var title:FlxText = new FlxText(UI_box.x + 20, UI_box.y + 20, 0);
		bullshitUI.add(title);
		/* 
			var loopCheck = new FlxUICheckBox(UI_box.x + 10, UI_box.y + 50, null, null, "Loops", 100, ['loop check']);
			loopCheck.checked = curNoteSelected.doesLoop;
			tooltips.add(loopCheck, {title: 'Section looping', body: "Whether or not it's a simon says style section", style: tooltipType});
			bullshitUI.add(loopCheck);

		 */
	}

	override function getEvent(id:String, sender:Dynamic, data:Dynamic, ?params:Array<Dynamic>)
	{
		if (id == FlxUICheckBox.CLICK_EVENT){
			var check:FlxUICheckBox = cast sender;
			var label = check.getLabel().text;
			switch (label)
			{
				case 'Is player section':
					_song.notes[curSection].mustHitSection = check.checked;
				case 'Center Camera':
					_song.notes[curSection].centerCamera = check.checked;
				case 'Change BPM':
					_song.notes[curSection].changeBPM = check.checked;
				case "Alt Animations":
					_song.notes[curSection].altAnim = check.checked;
			}
			return;
		}
		if (id == FlxUINumericStepper.CHANGE_EVENT && (sender is FlxUINumericStepper)){
			var nums:FlxUINumericStepper = cast sender;
			var wname = nums.name;
			switch(wname) {
				case 'section_length':
				
					if (nums.value <= 4)
						nums.value = 4;
					_song.notes[curSection].lengthInSteps = Std.int(nums.value);
					updateGrid();
				
				case 'song_speed':
					if (nums.value <= 0)
						nums.value = 0;
					_song.speed = nums.value;
				case 'song_offset':
					_song.offset = nums.value;
					Conductor.mapBPMChanges(_song);
					// Conductor.changeBPM(nums.value);
				case 'song_bpm':
					if (nums.value <= 0)
						nums.value = 1;
					tempBpm = nums.value;
					Conductor.mapBPMChanges(_song);
					Conductor.changeBPM(nums.value);
				case 'song_keycount':
					if (nums.value < 1) nums.value = 1;
					// if (nums.value > 18) nums.value = 18;
					_song.keyCount = Std.int(nums.value);
				
				case 'note_susLength':
					if (curSelectedNote == null)
						return;

					if (nums.value <= 0)
						nums.value = 0;
					curSelectedNote[2] = nums.value;
					updateGrid(false);
				
				case 'section_bpm':
				
					if (nums.value <= 0.1)
						nums.value = 0.1;
					_song.notes[curSection].bpm = Std.int(nums.value);
					updateGrid();
				case 'song_vocalvol':
				
					if (nums.value <= 0)
						nums.value = 0;
					vocals.volume = nums.value;
				case 'song_instvol':
					if (nums.value <= 0)
						nums.value = 0;
					FlxG.sound.music.volume = nums.value;
				
			}
		}

		// FlxG.log.add(id + " WEED " + sender + " WEED " + data + " WEED " + params);
	}

	var updatedSection:Bool = false;

	/* this function got owned LOL
		function lengthBpmBullshit():Float
		{
			if (_song.notes[curSection].changeBPM)
				return _song.notes[curSection].lengthInSteps * (_song.notes[curSection].bpm / _song.bpm);
			else
				return _song.notes[curSection].lengthInSteps;
	}*/

	function stepStartTime(step):Float return _song.bpm / (step / 4) / 60;

	function sectionStartTime(section:Int):Float
	{
		var daBPM:Float = _song.bpm;
		var daPos:Float = 0;
		for (i in 0...section)
		{
			if (_song.notes[i].changeBPM)
			{
				daBPM = _song.notes[i].bpm;
			}
			daPos += 4 * (1000 * 60 / daBPM);
		}
		return daPos;
	}

	var writingNotes:Bool = false;
	var doSnapShit:Bool = true;
	var selectedNote:Note = null;
	var modifyingNote:Bool = false;
	var noteSnaps:Array<FlxSound> = [];
	/*Selecting and copying multiple notes*/
	var selectedNotes:Array<Array<Dynamic>> = []; // [NOTE,Notedata]
	function deselectNotes(?note:Array<Dynamic> = null){
		if(selectedNotes[0] == null){return;}
		if(note != null){
			try{
				selectedNotes.remove(note);
				// FlxTween.cancelTweensOf(note[2],["alpha"]);
				note[3].cancel();
				note[2].destroy();
				// note[0].alpha = 1;
				// note[0].scale.set(0.7);
				trace('Removed $note');
				return;

			}catch(e){} // note probably doesn't exist for some reason if this throws an error
			return;
		}
		for (i in selectedNotes){
			try{
				FlxTween.cancelTweensOf(i[2],["alpha"]);
				i[2].destroy();
			}catch(e){} // note probably doesn't exist for some reason if this throws an error
		}
		trace('Deselected all notes');
		selectedNotes = [];
	}
	function addToSelected(note:Note){
		var del:Bool = false;
		for (i in selectedNotes){
			if(i[1][0] == curSelectedNote[0] && i[1][1] == curSelectedNote[1] && i[1][2] == curSelectedNote[2]){
				deselectNotes(i);
				del=true;
			}
		}
		if(del)return;
		// note.angle = 45;
		var perc = 0;
		if(selectedNotes[0] != null && selectedNotes[0][3] != null){
			perc = selectedNotes[0][3].percent;
		}
		var _dummy = new FlxSprite(note.x,note.y).makeGraphic(GRID_SIZE, GRID_SIZE);
		add(_dummy);
		_dummy.alpha = 0.8;
		var twee = FlxTween.tween(_dummy,{alpha:0.5},0.4,{type:FlxTweenType.PINGPONG,ease:FlxEase.cubeIn});
		twee.percent = perc;
		selectedNotes.push([note,curSelectedNote,_dummy,twee,curSection]);
	}
	inline function updateSelected(){
		for (i in selectedNotes){
			i[2].visible = (i[4] == curSection);
		}
	}
	function goToTime(time:Float){
		if(time > Conductor.songPosition){
			while(Conductor.songPosition < time){
				increaseSection();
				if(_song.notes[curSection + 1] == null || Conductor.songPosition > FlxG.sound.music.length) break;
				Conductor.songPosition = sectionStartTime(curSection + 1);

			}
		}else{
			while(Conductor.songPosition > time){
				// Conductor.songPosition -= Conductor.stepCrochet;
				// updateCurStep();
				if(_song.notes[curSection - 1] == null) break;
				changeSection(curSection - 1);
				if(_song.notes[curSection - 1] == null) break;
				Conductor.songPosition = sectionStartTime(curSection - 1);
				// curStep = recalculateSteps();
				// updateSection();

			}

		}
		Conductor.songPosition = time;
	}
	override function update(elapsed:Float)
	{try{
		updateHeads();

		curStep = recalculateSteps();

		doSnapShit = (!FlxG.keys.pressed.SHIFT || FlxG.keys.pressed.CONTROL);

		
		gridBGAbove.alpha = (curSection == 0 ? 0.3 : 0.7);



		Conductor.songPosition = FlxG.sound.music.time;
		_song.song = typingShit.text;

		if (FlxG.keys.justPressed.F2) FlxG.save.data.showHelp = !FlxG.save.data.showHelp;


		strumLine.y = getYfromStrum((Conductor.songPosition - sectionStartTime(curSection)) % (Conductor.stepCrochet * _song.notes[curSection].lengthInSteps));
		


		if (FlxG.sound.music != null && FlxG.sound.music.playing){
			if(vocals.playing && (vocals.time > (FlxG.sound.music.time + 10) || vocals.time < FlxG.sound.music.time - 10)){
				vocals.time = FlxG.sound.music.time;
			}
			@:privateAccess {
				// The __backend.handle attribute is only available on native.
				lime.media.openal.AL.sourcef(FlxG.sound.music._channel.__audioSource.__backend.handle, lime.media.openal.AL.PITCH, speed);
				try{
					// We need to make CERTAIN vocals exist and are non-empty
					// before we try to play them. Otherwise the game crashes.
					if (vocals != null && vocals.length > 0)
						lime.media.openal.AL.sourcef(vocals._channel.__audioSource.__backend.handle, lime.media.openal.AL.PITCH, speed);
					
				}
				catch (e){}
				// Silent error, no need to log this error
			}
			
		}
		updateSection();
		updateVisualiser(elapsed);

		if(FlxG.keys.pressed.CONTROL){

			if(FlxG.keys.justPressed.R){
				sectionRestructure();
				updateSectionUI();
				updateGrid();
				showTempmessage(if(FlxG.keys.pressed.SHIFT)"Reset sections and readded them" else "Reordered chart");
			}else if(FlxG.keys.justPressed.S){
				saveLevel();
			}
		}

		if (typingFocus()){
			if(FlxG.keys.pressed.CONTROL && FlxG.keys.pressed.SHIFT && FlxG.keys.justPressed.D){
				Conductor.songPosition = 0;
				_song.notes = [];
				addSection();
				addSection();
				updateSectionUI();
				updateGrid();
				showTempmessage("Deleted all sections");
			}
			if (FlxG.mouse.x > gridBG.x
				&& FlxG.mouse.x < gridBG.x + gridBG.width
				&& FlxG.mouse.y > gridBG.y
				&& FlxG.mouse.y < gridBG.y + (GRID_SIZE * _song.notes[curSection].lengthInSteps))
			{
				dummyArrow.x = Math.floor(FlxG.mouse.x / GRID_SIZE) * GRID_SIZE;
				dummyArrow.y = (doSnapShit ?
								Math.floor(FlxG.mouse.y / (GRID_SIZE / (notesnap / 16))) * (GRID_SIZE / (notesnap / 16)) :
								FlxG.mouse.y);
			}
			var justAdded = false;
			if (FlxG.mouse.justPressed){
				justAdded = true;
				var overlaps = false;
				for(note in curRenderedNotes.members){
					if (FlxG.mouse.overlaps(note)){
						overlaps = true;
						if (FlxG.keys.pressed.CONTROL)
						{
							selectNote(note);
							if(FlxG.keys.pressed.SHIFT){
								addToSelected(note);
								modifyingNote = true;
								// selectedNotes.push(note);
							}else{
								deselectNotes();
							}

						}else{
							deselectNotes();
							deleteNote(note);
							modifyingNote = true;
						}
					}
				}
				if(!overlaps){

					if (!FlxG.keys.pressed.CONTROL && FlxG.mouse.x > gridBG.x
						&& FlxG.mouse.x < gridBG.x + gridBG.width
						&& FlxG.mouse.y > gridBG.y
						&& FlxG.mouse.y < gridBG.y + (GRID_SIZE * _song.notes[curSection].lengthInSteps))
					{
						deselectNotes();
						addNote();
					}else if (!(FlxG.keys.pressed.CONTROL && FlxG.keys.pressed.SHIFT) && FlxG.mouse.x > gridBG.x
						&& FlxG.mouse.x < gridBG.x + gridBG.width
						&& FlxG.mouse.y > gridBG.y
						&& FlxG.mouse.y < gridBG.y + (GRID_SIZE * _song.notes[curSection].lengthInSteps)){
						deselectNotes();
					}
				}
				
			}
			if(FlxG.mouse.pressed){
				if (curSelectedNote != null && !modifyingNote && !justAdded && Math.floor(FlxG.mouse.x / GRID_SIZE) == (curSelectedNote[1] + 1)){
					replaceNoteSustain(getStrumTime(dummyArrow.y) + sectionStartTime(curSection));
					dummyArrow.visible = false;
				}
			}else{
				modifyingNote = false;
				dummyArrow.visible = true;
			}

			if (FlxG.keys.pressed.SHIFT && FlxG.keys.justPressed.ESCAPE){
				charting = false;
				FlxG.switchState(new MainMenuState());
			}else if (FlxG.keys.justPressed.ENTER || FlxG.keys.justPressed.ESCAPE){
				lastSection = curSection;

				PlayState.SONG = _song;
				FlxG.sound.music.stop();
				vocals.stop();
				gotoPlaystate(FlxG.keys.justPressed.ENTER);
			}
			if (FlxG.keys.justPressed.E) changeNoteSustain(Conductor.stepCrochet);
			if (FlxG.keys.justPressed.Q) changeNoteSustain(-Conductor.stepCrochet);

			if (FlxG.keys.justPressed.TAB){
				if (FlxG.keys.pressed.SHIFT) {
					UI_box.selected_tab -= 1;
					if (UI_box.selected_tab < 0) UI_box.selected_tab = 2;
				}else{
					UI_box.selected_tab += 1;
					if (UI_box.selected_tab >= 3) UI_box.selected_tab = 0;
				} 
			}

			if (FlxG.keys.pressed.CONTROL && FlxG.keys.justPressed.Z && lastNote != null){
				trace(curRenderedNotes.members.contains(lastNote) ? "delete note" : "add note");
				if (curRenderedNotes.members.contains(lastNote)) deleteNote(lastNote);
				else addNote(lastNote);
			}
			if(FlxG.keys.pressed.CONTROL && (FlxG.keys.justPressed.RIGHT || FlxG.keys.justPressed.LEFT)){
				if(FlxG.keys.justPressed.RIGHT) snapSelection++;
				else snapSelection--;
				if (snapSelection > 16) snapSelection = 16;
				if (snapSelection < 1) snapSelection = 1;
				notesnap = 4 * snapSelection;
			}

			if (FlxG.keys.justPressed.RBRACKET) FlxG.camera.zoom += 0.05;
			if (FlxG.keys.justPressed.LBRACKET) FlxG.camera.zoom -= 0.05;

			if (FlxG.keys.pressed.SHIFT){
				if (FlxG.keys.justPressed.RIGHT) speed += 0.1;
				else if (FlxG.keys.justPressed.LEFT) speed -= 0.1;
				if (speed > 3) speed = 3;
				else if (speed <= 0.01) speed = 0.1;
			}else if(!FlxG.keys.pressed.CONTROL){
				if (FlxG.keys.justPressed.RIGHT || FlxG.keys.justPressed.D)
					increaseSection(true);
				if (FlxG.keys.justPressed.LEFT || FlxG.keys.justPressed.A)
					changeSection(curSection - 1);
			}	
			if (FlxG.keys.justPressed.SPACE){
				if (FlxG.sound.music.playing){
					FlxG.sound.music.pause();
					vocals.pause();
				}else{
					vocals.play();
					FlxG.sound.music.play();
				}
			}

			if (FlxG.keys.justPressed.R) resetSection(FlxG.keys.pressed.SHIFT);

			
			if (FlxG.sound.music.time < 0 || curStep < 0) FlxG.sound.music.time = 0;

			if (FlxG.mouse.wheel != 0) {
				var wasPlaying:Bool = FlxG.sound.music.playing;
				FlxG.sound.music.pause();
				vocals.pause();
				// claps.splice(0, claps.length);

				var stepMs = curStep * Conductor.stepCrochet;


				// trace(Conductor.stepCrochet / snap);

				// if (doSnapShit)
				// 	FlxG.sound.music.time = stepMs - (FlxG.mouse.wheel * Conductor.stepCrochet / snap);
				// else
				var addedTime = FlxG.sound.music.time - (FlxG.mouse.wheel * Conductor.stepCrochet);
				if(addedTime < 1){
					FlxG.sound.music.time = FlxG.sound.music.length - addedTime;
				}else if(addedTime > FlxG.sound.music.length){
					FlxG.sound.music.time = -(FlxG.mouse.wheel * Conductor.stepCrochet);
				}else{
					FlxG.sound.music.time = addedTime;
				}

				vocals.time = FlxG.sound.music.time;
				if(wasPlaying){
					FlxG.sound.music.play();
					vocals.play();
				}
			}

			if (FlxG.keys.pressed.W || FlxG.keys.pressed.S){
				FlxG.sound.music.pause();
				vocals.pause();
				claps.splice(0, claps.length);
				var daTime:Float = (FlxG.keys.pressed.SHIFT ? Conductor.stepCrochet * 2 : 700 * FlxG.elapsed);
				if (FlxG.keys.pressed.W) FlxG.sound.music.time -= daTime;
				else FlxG.sound.music.time += daTime;
				vocals.time = FlxG.sound.music.time;
			}
		}


		_song.bpm = tempBpm;

		if(playBeatClaps && FlxG.sound.music.playing){ // Weird ifstatement but don't change hasClapped unless playBeatClaps is true
			if(curStep % 4 == 0) {if(!hasClapped){playClap();hasClapped = true;}} else hasClapped = false;
		}

		bpmTxt.text = 'SE(Buggy) chart editor\n'
			+ '${FlxMath.roundDecimal(Conductor.songPosition / 1000, 2)} / ${FlxMath.roundDecimal(FlxG.sound.music.length / 1000, 2)}'
			+ '\nSection: $curSection'
			+ '\nCurStep: $curStep'
			+ '\nSpeed: ${HelperFunctions.truncateFloat(speed, 1)}'
			+ '\nChartType: ${chartType}'
			+ '\nSnap: ${notesnap}'
			// + '\n${if(playBeatClaps)"Play clap on beat; " else ""}${if(playClaps)"Play snap on note" else ""}'
			+ (doSnapShit ? "Snap enabled" : "Snap disabled")
			+ (FlxG.save.data.showHelp ? '\n\nShift-Left/Right : Change playback speed\nCTRL-Left/Right : Change Snap\nHold Shift : Disable Snap\nShift+Escape : Exit to main menu\n Enter/Escape : Preview chart\n F2 : hide/show this' : "");
		super.update(elapsed);
		if(requestMusicPlay){
			vocals.play();
			FlxG.sound.music.play();
			requestMusicPlay = false;
		}
	}catch(e){MainMenuState.handleError(e,"chart editor did a fucky: " + e.message);
		}
	}
	inline function increaseSection(?updateMusic:Bool = false){
		if (_song.notes[curSection + 1] == null || _song.notes[curSection + 2] == null){
			addSection();
		}
		changeSection(curSection + 1, updateMusic);
	}
	var hasClapped = false;



	var waveformPrinted:Bool = true;
	var audioBuffers:Array<AudioBuffer> = [null, null];
	var audioBytes:Array<Bytes> = [null, null];
	function updateVisualiser(e:Float){
		var checkForVoices:Int = (if(waveformUseInstrumental.checked) 0 else 1);
		if(!waveformEnabled.checked || audioBuffers[checkForVoices] == null) {
			return;
		}
		var vol = .0;
		if(FlxG.sound.music.playing){

			var sampleMult:Float = audioBuffers[checkForVoices].sampleRate / 44100;
			var index:Int = Std.int(FlxG.sound.music.time * 44.100 * sampleMult);
			vol = audioBuffers[checkForVoices].data.toBytes().getUInt16(index * 4) / 65535;
		}

		visualiser.members[1].scale.x = FlxMath.lerp(visualiser.members[1].scale.x,vol,e * 2.5);
		// visualiser.members[0].scale.x = (audioBuffers[checkForVoices].data.toBytes().getUInt16(index * 4) / 65535 );
	}
	function updateWaveform() {
		if(waveformPrinted) {
			waveformSprite.makeGraphic(Std.int(GRID_SIZE * 9), Std.int(gridBG.height), 0x00FFFFFF);
			waveformSprite.pixels.fillRect(new Rectangle(0, 0, gridBG.width, gridBG.height), 0x00FFFFFF);
		}
		waveformPrinted = false;

		var checkForVoices:Int = (if(waveformUseInstrumental.checked) 0 else 1);

		if(!waveformEnabled.checked || audioBuffers[checkForVoices] == null) {
			return;
		}

		var sampleMult:Float = audioBuffers[checkForVoices].sampleRate / 44100;
		var index:Int = Std.int(sectionStartTime(curSection) * 44.0875 * sampleMult);
		var drawIndex:Int = 0;

		var steps:Int = _song.notes[curSection].lengthInSteps;
		if(Math.isNaN(steps) || steps < 1) steps = 16;
		var samplesPerRow:Int = Std.int(((Conductor.stepCrochet * steps * 1.1 * sampleMult) / 16));
		if(samplesPerRow < 1) samplesPerRow = 1;
		var waveBytes:Bytes = audioBuffers[checkForVoices].data.toBytes();
		
		var min:Float = 0;
		var max:Float = 0;
		while (index < (waveBytes.length - 1))
		{
			var byte:Int = waveBytes.getUInt16(index * 4);

			if (byte > 65535 / 2)
				byte -= 65535;

			var sample:Float = (byte / 65535);

			if (sample > 0)
			{
				if (sample > max)
					max = sample;
			}
			else if (sample < 0)
			{
				if (sample < min)
					min = sample;
			}

			if ((index % samplesPerRow) == 0)
			{
				// trace("min: " + min + ", max: " + max);

				/*if (drawIndex > gridBG.height)
				{
					drawIndex = 0;
				}*/

				var pixelsMin:Float = Math.abs(min * (GRID_SIZE * 9));
				var pixelsMax:Float = max * (GRID_SIZE * 9);
				if(checkForVoices == 1)waveformSprite.pixels.fillRect(new Rectangle(Std.int((GRID_SIZE * 4) - pixelsMin), drawIndex, pixelsMin + pixelsMax, 1), FlxColor.BLUE);
				else waveformSprite.pixels.fillRect(new Rectangle(Std.int((GRID_SIZE * 4) - pixelsMin), drawIndex, pixelsMin + pixelsMax, 1), FlxColor.RED);
				drawIndex++;

				min = 0;
				max = 0;

				if(drawIndex > gridBG.height) break;
			}

			index++;
		}
		waveformPrinted = true;
	}

	function replaceNoteSustain(value:Float):Void
	{
		if (curSelectedNote != null && curSelectedNote[1] != -1 && curSelectedNote[2] != null)
		{
			value = value - curSelectedNote[0]; 
			curSelectedNote[2] = Math.max(value, 0);


			updateNoteUI();
			updateGrid(false);
		}
	}
	function changeNoteSustain(value:Float):Void
	{
		if (curSelectedNote != null && curSelectedNote[1] != -1)
		{
			if (curSelectedNote[2] != null)
			{
				curSelectedNote[2] += value;
				curSelectedNote[2] = Math.max(curSelectedNote[2], 0);
			}
		}

		updateNoteUI();
		updateGrid(false);
	}

	// override public function stepHit() 
	// {

	// 	super.stepHit();
	// 	if(curStep % 4 == 0) playClap();
	// }

	function recalculateSteps():Int
	{
		var lastChange:BPMChangeEvent = {
			stepTime: 0,
			songTime: 0,
			bpm: 0
		}
		for (i in 0...Conductor.bpmChangeMap.length)
		{
			if (FlxG.sound.music.time > Conductor.bpmChangeMap[i].songTime)
				lastChange = Conductor.bpmChangeMap[i];
		}

		curStep = lastChange.stepTime + Math.floor((FlxG.sound.music.time - lastChange.songTime) / Conductor.stepCrochet);
		updateBeat();

		return curStep;
	}

	function resetSection(songBeginning:Bool = false):Void
	{

		FlxG.sound.music.pause();
		vocals.pause();

		// Basically old shit from changeSection???
		FlxG.sound.music.time = sectionStartTime(curSection);

		if (songBeginning)
		{
			FlxG.sound.music.time = 0;
			curSection = 0;
		}

		vocals.time = FlxG.sound.music.time;
		updateCurStep();

		updateGrid();
		updateSectionUI();
		updateWaveform();
	}
	var requestMusicPlay = false;
	inline function updateSection(){
		if (curStep >= 16 * (curSection + 1))
		{
			while(curStep >= 16 * (curSection + 1)) increaseSection();
		}
		if (curStep <= (16 * curSection) - 1 && _song.notes[curSection - 1] != null)
		{
			while(curStep <= (16 * curSection) - 1 && _song.notes[curSection - 1] != null) changeSection(curSection - 1, false);
		}
	}
	function changeSection(sec:Int = 0, ?updateMusic:Bool = true):Void
	{
		if(sec < 0){
			sec = 0;
			if(FlxG.sound.music.playing){
				FlxG.sound.music.pause();
				vocals.pause();
				claps.splice(0, claps.length);
				requestMusicPlay = true;
			}
			Conductor.songPosition = 0;
			FlxG.sound.music.time = Conductor.songPosition;
			vocals.time = FlxG.sound.music.time;
			updateCurStep();
			curSection = 0;
			return;
		}

		if (_song.notes[sec] == null)
		{
			_song.notes[sec] = {
				sectionNotes:[],
				lengthInSteps:16,
				mustHitSection:false,
				centerCamera:false,
				bpm:_song.notes[curSection].bpm,
				typeOfSection:0,
				changeBPM:false,
				altAnim:false
			};
			// _song.notes[sec].sectionNotes = [];
		}

		// trace('naw im not null');
		curSection = sec;

		// updateGrid();

		// if (updateMusic)
		// {
		if(updateMusic){
			if(FlxG.sound.music.playing){
				FlxG.sound.music.pause();
				vocals.pause();
				claps.splice(0, claps.length);
				requestMusicPlay = true;
			}
			Conductor.songPosition = sectionStartTime(curSection);
			FlxG.sound.music.time = Conductor.songPosition;
			vocals.time = FlxG.sound.music.time;
			updateCurStep();
		}
		// }
		updateSelected();
		updateGrid();
		updateSectionUI();
		updateWaveform();
		
	}

	function copySection(?sectionNum:Int = 1)
	{
		var daSec = FlxMath.maxInt(curSection, sectionNum);

		for (note in _song.notes[daSec - sectionNum].sectionNotes)
		{
			var strum = note[0] + Conductor.stepCrochet * (_song.notes[daSec].lengthInSteps * sectionNum);

			var copiedNote:Array<Dynamic> = [strum, note[1], note[2]];
			_song.notes[daSec].sectionNotes.push(copiedNote);
		}

		updateGrid();
	}

	inline function updateSectionUI():Void
	{
		var sec = _song.notes[curSection];

		stepperLength.value = sec.lengthInSteps;
		check_mustHitSection.checked = sec.mustHitSection;
		check_centerCamera.checked = sec.centerCamera;
		check_altAnim.checked = sec.altAnim;
		check_changeBPM.checked = sec.changeBPM;
		stepperSectionBPM.value = sec.bpm;
		updateHeads();
	}

	inline function updateHeads():Void
	{
		(if(check_mustHitSection.checked) leftIcon else rightIcon).x = 40;
		(if(check_mustHitSection.checked) rightIcon else leftIcon).x = 207;

		evNote.x = 18;
		evNote.y = -80;
		leftIcon.scrollFactor.set(1, 1);
		rightIcon.scrollFactor.set(1, 1);
		evNote.scrollFactor.set(1, 1);
	}

	inline function updateNoteUI():Void
	{
		if (curSelectedNote != null) stepperSusLength.value = curSelectedNote[2];
	}
	inline function regNote(note,i) {rawToNote[i] = note; return noteToRaw[note] = i;}
	function updateNote(note:Note,i:Array<Dynamic>,?sect:Int = 1){
		if(note != null && noteToRaw[note] != null && noteToRaw[note] != i){
			var raw = noteToRaw[note];
			while(raw.length > 0){
				raw.pop();
			}
			var id = i.length - 1;
			while(id > 0){
				raw[id] = i[id];
				id--;
			}
		}
		if(note == null && rawToNote[i] != null) note = rawToNote[i];
		if(note != null){
			noteToRaw[note] = null;
			curRenderedNotes.remove(note);
			note.destroy();
		}
		var daStrumTime = i[0];
		var daNoteInfo = i[1];
		var daSus:Dynamic = i[2];
		var daType:Dynamic = i[3];
		var note:Note = new Note(daStrumTime, daNoteInfo, daType, false, true, i[3], i[4]);
		daType = note.type;
		if(daType != 0 || !(daType is Int)){
			note.ntText=new FlxText(0,0,('$daType').substring(0,4),16);
			note.ntText.setBorderStyle(OUTLINE,0xff000000,2,1);
			if(Std.isOfType(daType,Array)) note.ntText.color = 0x00FFFF; else if(Std.isOfType(daType,Int)) note.ntText.color = 0x00FF00; else note.ntText.color = 0xFFFFFF;
		}
		note.sustainLength = daSus;
		note.setGraphicSize(GRID_SIZE, GRID_SIZE);
		note.updateHitbox();
		note.x = Math.floor((daNoteInfo + 1 % ((_song.keyCount * 2) + 1)) * GRID_SIZE);
		// trace('Adding $i to $sect');
		switch(sect){
			case 0:note.y = Math.floor(getAboveYfromStrum((daStrumTime - sectionStartTime(curSection - 1)) % (Conductor.stepCrochet * _song.notes[curSection - 1].lengthInSteps)));
			case 1:note.y = Math.floor(getYfromStrum((daStrumTime - sectionStartTime(curSection)) % (Conductor.stepCrochet * _song.notes[curSection].lengthInSteps)));
			case 2:note.y = Math.floor(getBelowYfromStrum((daStrumTime - sectionStartTime(curSection + 1)) % (Conductor.stepCrochet * _song.notes[curSection + 1].lengthInSteps)));
		}

		// trace('Added $i to $sect');
		// if (curSelectedNote != null)
		// 	if (curSelectedNote[0] == note.strumTime)
		// 		lastNote = note;
		rawToNote[i] = note;
		noteToRaw[note] = i;

		callInterp('updateNote',[note,i]);
		curRenderedNotes.add(note);
	}
	function updateGrid(?updateNotes:Bool = true):Void
	{

		callInterp('updateGrid',[updateNotes]);
		if(updateNotes){
			rawToNote = [];
			noteToRaw = [];
			CoolUtil.clearFlxGroup(curRenderedNotes);
		}

		
		CoolUtil.clearFlxGroup(curRenderedSustains);

		var sectionInfo:Array<Dynamic> = _song.notes[curSection].sectionNotes;

		var lastSectionInfo:Array<Dynamic> = null;
		if (_song.notes[curSection - 1] != null)
			lastSectionInfo = _song.notes[curSection - 1].sectionNotes;

		var nextSectionInfo:Array<Dynamic> = null;
		if (_song.notes[curSection + 1] != null)
			nextSectionInfo = _song.notes[curSection + 1].sectionNotes;

		if (_song.notes[curSection].changeBPM && _song.notes[curSection].bpm > 0)
		{
			Conductor.changeBPM(_song.notes[curSection].bpm);
		}
		else
		{
			// get last bpm
			var daBPM:Float = _song.bpm;
			for (i in 0...curSection)
				if (_song.notes[i].changeBPM)
					daBPM = _song.notes[i].bpm;
			Conductor.changeBPM(daBPM);
		}

		/* // PORT BULLSHIT, INCASE THERE'S NO SUSTAIN DATA FOR A NOTE
			for (sec in 0..._song.notes.length)
			{
				for (notesse in 0..._song.notes[sec].sectionNotes.length)
				{
					if (_song.notes[sec].sectionNotes[notesse][2] == null)
					{
						trace('SUS NULL');
						_song.notes[sec].sectionNotes[notesse][2] = 0;
					}
				}
			}
		 */
		for (secID => sectionInfo in [lastSectionInfo,sectionInfo,nextSectionInfo]){
			// secID += 1;
			if(sectionInfo == null || sectionInfo[0] == null) {continue;}
			var id = 0;
			var i:Array<Dynamic>;
			var sustainColors:Array<Null<Int>> = [0xFFC24B99,0xFF00FFFF,0x12FA05,0xF9393F];
			while (id <= sectionInfo.length)
			{
				i = sectionInfo[id];
				id++;
				if(i == null || i[0] == null){continue;}
				var daSus = i[2];
				if(rawToNote[i] == null){
					updateNote(null,i,secID);
				}

				if (!Math.isNaN(daSus) && daSus > 0){
					var note = rawToNote[i];
					var daNoteInfo = i[1];
					var daStrumTime = i[0];
					var daType = i[3];
					var sustainVis:FlxSprite = new FlxSprite(note.x + (GRID_SIZE / 2),
						note.y + GRID_SIZE).loadGraphic(sustainGraphic);
					sustainVis.setGraphicSize(8, Math.floor(FlxMath.remapToRange(daSus, 0, Conductor.stepCrochet * _song.notes[curSection].lengthInSteps, 0, gridBG.height)));
					if(sustainColors[note.noteData] != null) sustainVis.color = sustainColors[note.noteData];
					curRenderedSustains.add(sustainVis);
				}
			}
		}
		callInterp('updateGridAfter',[]);
		updateSelected();
	}


	@:keep inline function addSection(lengthInSteps:Int = 16):SwagSection
	{
		var sec:SwagSection = newSection(lengthInSteps);

		_song.notes.push(sec);
		callInterp('addSection',[sec]);
		return sec;
	}
	var currentNoteObj:Note;

	function selectNote(note:Note):Void
	{
		var swagNum:Int = 0;
		if(noteToRaw[note] == null){
			showTempmessage("Unable to find that note?");
			return;
			// for (i in _song.notes[curSection].sectionNotes)
			// {
			// 	if (i[0] == note.strumTime && i[1] == note.rawNote[1])
			// 	{
			// 		if(currentNoteObj != null){
			// 			currentNoteObj.color = 0xFFFFFF;
			// 		}
			// 		curSelectedNote = _song.notes[curSection].sectionNotes[swagNum];
			// 	}

			// 	swagNum += 1;
			// }
		}else{
			if(currentNoteObj != null){
				currentNoteObj.color = 0xFFFFFF;
			}
			curSelectedNote = noteToRaw[note];
		}
		var arr = curSelectedNote.slice(if(curSelectedNote[1] == -1 || Math.isNaN(curSelectedNote[2]) ) 2 else 3);
		if (arr[0] == 1) arr[0] = "hurt note";
		noteTypeInput.text = (if(arr[0] == null) '' else '${arr.shift()}');
		if(noteTypeInput.text == "null" ) noteTypeInput.text = "";
		noteTypeInputcopy.text = arr.join(', ');
		if(noteTypeInputcopy.text.toLowerCase() == "null") noteTypeInputcopy.text = "";
		currentNoteObj = note;
		currentNoteObj.color = 0xFFFFAAFF;
		// updateGrid();
		updateNoteUI();

		callInterp('selectNote',[currentNoteObj]);
	}
	function deleteNote(note:Note):Void
		{
			lastNote = note;
			var n = noteToRaw[note];
			if(!_song.notes[curSection].sectionNotes.remove(n)){
				var secID = 0 ;
				var rem = false;
				while(_song.notes[secID] == null){
					if(_song.notes[secID].sectionNotes != null && _song.notes[secID].sectionNotes.remove(n)) break;
					secID++;
				}

			}
			// _song.notes[curSection].sectionNotes.remove();
			
	
			updateGrid(true);
		}

	@:keep inline function clearSection():Void
	{
		var sect = _song.notes[curSection];
		sect.sectionNotes = [];
		callInterp('clearSection',[sect]);
		updateGrid();
	}

	@:keep inline function clearSong():Void
	{
		for (daSection in 0..._song.notes.length)
		{
			_song.notes[daSection].sectionNotes = [];
		}

		callInterp('clearSong',[currentNoteObj]);
		updateGrid();
	}

	@:keep inline function newSection(lengthInSteps:Int = 16,mustHitSection:Bool = false,altAnim:Bool = true):SwagSection
		{
			return {
				lengthInSteps: lengthInSteps,
				bpm: _song.bpm,
				changeBPM: false,
				mustHitSection: mustHitSection,
				sectionNotes: [],
				typeOfSection: 0,
				altAnim: altAnim
			};
		}

	function shiftNotes(measure:Int=0,step:Int=0,ms:Int = 0):Void
		{
			var newSong = [];
			
			var millisecadd = (((measure*4)+step/4)*(60000/_song.bpm))+ms;
			var totaladdsection = Std.int((millisecadd/(60000/_song.bpm)/4));
			trace(millisecadd,totaladdsection);
			if(millisecadd > 0)
				{
					for(i in 0...totaladdsection)
						{
							newSong.unshift(newSection());
						}
				}
			for (daSection1 in 0..._song.notes.length)
				{
					newSong.push(newSection(16,_song.notes[daSection1].mustHitSection,_song.notes[daSection1].altAnim));
				}
	
			for (daSection in 0...(_song.notes.length))
			{
				var aimtosetsection = daSection+Std.int((totaladdsection));
				if(aimtosetsection<0) aimtosetsection = 0;
				newSong[aimtosetsection].mustHitSection = _song.notes[daSection].mustHitSection;
				newSong[aimtosetsection].altAnim = _song.notes[daSection].altAnim;
				//trace("section "+daSection);
				for(daNote in 0...(_song.notes[daSection].sectionNotes.length))
					{	
						var newtiming = _song.notes[daSection].sectionNotes[daNote][0]+millisecadd;
						if(newtiming<0)
						{
							newtiming = 0;
						}
						var futureSection = Math.floor(newtiming/4/(60000/_song.bpm));
						_song.notes[daSection].sectionNotes[daNote][0] = newtiming;
						newSong[futureSection].sectionNotes.push(_song.notes[daSection].sectionNotes[daNote]);
	
						//newSong.notes[daSection].sectionNotes.remove(_song.notes[daSection].sectionNotes[daNote]);
					}
	
			}
			//trace("DONE BITCH");
			_song.notes = newSong;
			updateGrid();
			updateSectionUI();
			updateNoteUI();
		}
	private function addNote(?n:Note):Void
	{
		try{

			var noteStrum = getStrumTime(dummyArrow.y) + sectionStartTime(curSection);
			var noteData = Math.floor(FlxG.mouse.x / GRID_SIZE) - 1;
			
			var noteSus = 0;
			var type:Dynamic = null;
			var params:Array<String> = [];
			if(noteTypeInput.text != ""){

				if(useNoteTypeBox.checked){
					type = noteTypeInput.text;
					params = noteTypeInputcopy.text.split(",");
				}
			}
			if(noteData == -1){
				if (n != null)
					_song.notes[curSection].sectionNotes.push([n.strumTime, n.noteData]);
				else
					_song.notes[curSection].sectionNotes.push([noteStrum, noteData]);

			}else{

				if (n != null)
					_song.notes[curSection].sectionNotes.push([n.strumTime, n.noteData, n.sustainLength]);
				else
					_song.notes[curSection].sectionNotes.push([noteStrum, noteData, noteSus]);
			}

			var thingy:Array<Dynamic> = _song.notes[curSection].sectionNotes[_song.notes[curSection].sectionNotes.length - 1];

			if (n != null && n.type != null && n.type != "") thingy.push(n.type);
			else if (type != null && type != "") thingy.push(type);
			for (_ => v in params) {
				if(Math.isNaN(Std.parseFloat(v))){
					thingy.push(v);
				}else{
					thingy.push(Std.parseFloat(v));

				}
			}

			curSelectedNote = thingy;
			
			callInterp('addNote',[thingy]);

			// updateGrid();
			updateNote(null,thingy);
			updateNoteUI();

		}catch(e){MainMenuState.handleError(e,'Error while placing note! ${e.message}');
		}
	}

	@:keep inline function getStrumTime(yPos:Float):Float
	{
		return FlxMath.remapToRange(yPos, gridBG.y, gridBG.y + gridBG.height, 0, 16 * Conductor.stepCrochet);
	}

	@:keep inline function getYfromStrum(strumTime:Float):Float
	{
		return FlxMath.remapToRange(strumTime, 0, 16 * Conductor.stepCrochet, gridBG.y, gridBG.y + gridBG.height);
	}
	@:keep inline function getAboveYfromStrum(strumTime:Float):Float
	{
		return FlxMath.remapToRange(strumTime, 0, 16 * Conductor.stepCrochet, gridBGAbove.y, gridBGAbove.y + gridBGAbove.height);
	}
	@:keep inline function getBelowYfromStrum(strumTime:Float):Float
	{
		return FlxMath.remapToRange(strumTime, 0, 16 * Conductor.stepCrochet, gridBGBelow.y, gridBGBelow.y + gridBGBelow.height);
	}

	/*
		function calculateSectionLengths(?sec:SwagSection):Int
		{
			var daLength:Int = 0;

			for (i in _song.notes)
			{
				var swagLength = i.lengthInSteps;

				if (i.typeOfSection == Section.COPYCAT)
					swagLength * 2;

				daLength += swagLength;

				if (sec != null && sec == i)
				{
					trace('swag loop??');
					break;
				}
			}

			return daLength;
	}*/
	private var daSpacing:Float = 0.3;

	@:keep inline function getNotes():Array<Dynamic>
	{
		var noteData:Array<Dynamic> = [];

		for (i in _song.notes)
		{
			noteData.push(i.sectionNotes);
		}

		return noteData;
	}

	@:keep inline function loadJson(song:String):Void
	{
		PlayState.SONG = Song.parseJSONshit(SELoader.loadText('assets/data/${song.toLowerCase()}/${song.toLowerCase()}.json'));
		FlxG.resetState();
	}

	@:keep inline function loadAutosave():Void
	{
		PlayState.SONG = Song.parseJSONshit(FlxG.save.data.autosave);
		FlxG.resetState();
	}

	inline function autosaveSong():Void
	{
		// FlxG.save.data.autosave = Json.stringify({
		// 	"song": _song
		// });
		// FlxG.save.flush();
	}
	var fd:FileDialog;
	private function loadLevel_()
	{
		// var json:Dynamic = {
		// 	"song": _song
		// };
		try{

			trace("Load song...");

			{// Not copied from FunkinVortex, dunno what you mean
				fd = new FileDialog();
				fd.onSelect.add(function(path){
				// _file = new FileReference();
				// _file.addEventListener(Event.COMPLETE, onSaveComplete);
				// _file.addEventListener(Event.CANCEL, onSaveCancel);
				// _file.addEventListener(IOErrorEvent.IO_ERROR, onSaveError);
				// // Bodgey as hell but doesn't work otherwise
				// _file.save('{"song":' + data + "}", path);


					_song = Json.parse(sys.io.File.getContent(path));
					callInterp('loadChart',[_song]);
					updateGrid();
					showTempmessage('Loaded chart from ${path}');
				

				});
				fd.browse(FileDialogType.OPEN, 'json', null, "Load chart");
			}
		}catch(e){showTempmessage('Something error while saving chart: ${e.message}');}
	}
	public static var lastPath:String;
	private function saveLevel()
	{
		// var json:Dynamic = {
		// 	"song": _song
		// };
		try{

			trace("Saving song...");
			var _raw = _song.rawJSON;
			_song.rawJSON = null; // It's a good idea to not include 2 copies of the json
			var data:String = Json.stringify(_song);
			_song.rawJSON = _raw; // It's a good idea to not include 2 copies of the json
			if ((data != null) && (data.length > 0))
			{// Not copied from FunkinVortex, dunno what you mean
				fd = new FileDialog();
				fd.onSelect.add(function(path){
				// for (sid => section in swagShit.notes) { // Sort sections for the funni
				// 	if(section.sectionNotes == null || section.sectionNotes[0] == null) continue;
					
				// 	haxe.ds.ArraySort.sort(section.sectionNotes, function(a, b) {
				// 		if(a[0] < b[0]) return -1;
				// 		else if(b[0] > a[0]) return 1;
				// 		else return 0;
				// 	});

				// }
				try{
					lastPath = onlinemod.OfflinePlayState.chartFile = path;}catch(e){return;}
					//Bodgey as hell but doesn't work otherwise
					sys.io.File.saveContent(path,'{"song":' + data + "}");

					callInterp('saveChart',[path]);
					showTempmessage('Saved chart to ${path}');
				

				});
				fd.browse(FileDialogType.SAVE, 'json', sys.FileSystem.absolutePath(lastPath), "Save chart");
			}
		}catch(e){showTempmessage('Something error while saving chart: ${e.message}');}
		saveReminder.reset();
	}
	function saveRemind(show:Bool = true){ // Save reminder every 10 minutes
		if(show)showTempmessage("Don't forget to save frequently!",FlxColor.RED);
		try{
			var path = (onlinemod.OfflinePlayState.chartFile ?? lastPath) + ".bak";
			callInterp('autosaveChart',[path]);
			var _raw = _song.rawJSON;
			_song.rawJSON = null;
			var data:String = Json.stringify(_song);
			_song.rawJSON = _raw;
			sys.io.File.saveContent(path,'{"song":' + data + "}");
			showTempmessage("Backup saved!",FlxColor.RED);
		}catch(e){
			trace(e);
		}
		if(saveReminder != null)saveReminder.cancel();
		saveReminder = new FlxTimer().start(600,function(tmr:FlxTimer){saveRemind();});
	}

	function onSaveComplete(_):Void
	{
		_file.removeEventListener(Event.COMPLETE, onSaveComplete);
		_file.removeEventListener(Event.CANCEL, onSaveCancel);
		_file.removeEventListener(IOErrorEvent.IO_ERROR, onSaveError);
		_file = null;
		FlxG.log.notice("Successfully saved LEVEL DATA.");
		showTempmessage("Saved chart to chartOutput.json");
	}

	/**
	 * Called when the save file dialog is cancelled.
	 */
	function onSaveCancel(_):Void
	{
		_file.removeEventListener(Event.COMPLETE, onSaveComplete);
		_file.removeEventListener(Event.CANCEL, onSaveCancel);
		_file.removeEventListener(IOErrorEvent.IO_ERROR, onSaveError);
		_file = null;
	}

	/**
	 * Called if there is an error while saving the gameplay recording.
	 */
	function onSaveError(_):Void
	{
		_file.removeEventListener(Event.COMPLETE, onSaveComplete);
		_file.removeEventListener(Event.CANCEL, onSaveCancel);
		_file.removeEventListener(IOErrorEvent.IO_ERROR, onSaveError);
		_file = null;
		FlxG.log.error("Problem saving Level data");
	}

	function gotoPlaystate(?jumpTo:Bool = false){
		charting = true;
		saveReminder.cancel();
		autosaveSong();
		if(jumpTo){
			PlayState.jumpTo = Conductor.songPosition;
		}
		MusicBeatState.returningFromClass = true;
		switch(PlayState.stateType){
			case 2: LoadingScreen.loadAndSwitchState(new onlinemod.OfflinePlayState()); 
			case 4,6: LoadingScreen.loadAndSwitchState(new multi.MultiPlayState());
			case 5: LoadingScreen.loadAndSwitchState(new osu.OsuPlayState());
			default: LoadingScreen.loadAndSwitchState(new PlayState());
		}
	}
}